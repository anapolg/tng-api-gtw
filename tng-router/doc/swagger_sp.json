{
   "swagger": "2.0",
   "info": {
      "description": "5GTANGO, an H2020 5GPPP project",
      "version": "5.0",
      "title": "5GTANGO SP Gatekeeper component REST API",
      "termsOfService": "https://5gtango.eu/",
      "license": {
         "name": "Apache License 2.0",
         "url": "https://github.com/sonata-nfv/tng-api-gtw/blob/master/LICENSE"
      }
   },
   "host": "localhost",
   "basePath": "/api/v3",
   "tags": [
      { "name": "root access", "description": "SP API root access"},
      { "name": "functions", "description": "SP API to list Virtual Network Functions (VNFs) available in the Catalogue" },
      { "name": "packages", "description": "SP API to manage packages (uploading, downloading, etc.)" },
      { "name": "pings", "description": "SP API to implement readiness and liveness" },
      { "name": "policies", "description": "SP API to manage placement and run-time policies" },
      { "name": "records", "description": "SP API to list function or service records available in the Repository" },
      { "name": "requests", "description": "SP API to manage services' and slices' lifecycle events (creation, scaling, deletion, etc.)" },
      { "name": "services", "description": "SP API to list Network Services (NSs) available in the Catalogue" },
      { "name": "settings", "description": "SP API to manage different kinds of settings" },
      { "name": "SLAs", "description": "SP API to manage SLA aggreements, configurations, licenses, templates and violations" },
      { "name": "slices", "description": "SP API to manage slice templates and slice instances (creation and deletion are handled through requests)" },
      { "name": "users", "description": "SP API to manage users" }
   ],
   "paths": {
      "/": {
         "get": {
            "tags": [ "root access" ],
            "summary": "Returns something usefull on access to root",
            "operationId": "returnRootAccess",
            "consumes": [ "*/*" ],
            "produces": [ "text/html; charset=utf-8" ],
            "parameters": [],
            "responses": { "200": { "description": "OK" } }
         }
      },
      "/functions": {
         "get": {
            "tags": ["functions"],
            "summary": "Returns a list of functions existing in the Catalogue",
            "operationId": "returnFunctions",
            "consumes": ["*/*"],
            "produces": ["application/json; charset=utf-8"],
            "parameters": [
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The number of records to be included in a page",
                  "required": false,
                  "type": "integer",
                  "format": "int32",
                  "minimum": 0,
                  "default": 100
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The number of the page of records to be shown (starting at 0)",
                  "required": false,
                  "type": "integer",
                  "format": "int32",
                  "minimum": 0,
                  "default": 0
                }
            ],
            "responses": {
                "200": { 
                  "description": "OK",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/FunctionsGetMetadataReturn"
                    }
                  }
                },
                "400": {"description": "Bad Request"}
            }
         },
         "options": {
           "tags": ["functions"],
           "summary": "Options for functions",
           "operationId": "functionOptions",
           "consumes": ["*/*"],
           "produces": ["application/json"],
           "parameters": [],
           "responses": {
               "200": { "description": "OK"},
               "400": {"description": "Bad Request"}
           }
         }
      },
      "/functions/{function_uuid}": {
        "get": {
          "tags": ["functions"],
          "summary": "Query a specific function meta-data",
          "parameters": [
            {
              "name": "function_uuid",
              "in": "path",
              "description": "UUID of the function which meta-data is required",
              "required": true,
              "type": "string",
              "format": "uuid"
            }
          ],
          "consumes": ["*/*"],
          "produces": ["application/json"],
          "responses": {
            "200": { "description": "OK", "schema":{ "$ref":"#/definitions/FunctionsGetMetadataReturn"}},
            "400": { "description": "Bad request"},
            "404": { "description": "Not found"}
          }
        }
      },
      "/packages": {
        "post": {
            "summary": "Uploads a package",
            "tags": ["packages"],
            "consumes": ["multipart/form-data"],
            "produces": ["application/json"],
            "parameters": [
              {
                "name": "package",
                "in": "formData",
                "required": true,
                "type": "string",
                "description": "Uploaded package file",
                "x-example": ""
              },
              {
                "name": "callback_url",
                "in": "formData",
                "required": false,
                "type": "string",
                "description": "URL called after unpackaging (optional)",
                "x-example": ""
              },
              {
                "name": "layer",
                "in": "formData",
                "required": false,
                "type": "integer",
                "format": "int32",
                "minimum": 0,
                "default": 0
              },
              {
                "name": "skip_store",
                "in": "formData",
                "required": false,
                "type": "string",
                "description": "Skip catalog upload of contents (optional)",
                "x-example": ""
              }
            ],
            "responses": {
                "200": { 
                  "description": "OK",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/PackagesGetMetadataReturn"
                    }
                  }
                },
                "400": {"description": "Bad Request"}
            }
        },
        "get": {
          "tags": ["packages"],
          "summary": "Query packages",
          "operationId": "packageQuerying",
          "consumes": ["*/*"],
          "produces": ["application/json"],
          "parameters": [
            {
              "name": "page_size",
              "in": "query",
              "description": "The number of records to be included in a page",
              "required": false,
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            {
              "name": "page_number",
              "in": "query",
              "description": "The number of the page of records to be shown (starting in 0)",
              "required": false,
              "type": "integer",
              "format": "int32",
              "minimum": 0,
              "default": 0
            }
          ],
          "responses": {
              "200": { 
                "description": "OK",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/PackagesGetMetadataReturn"
                  }
                }
              },
              "400": {"description": "Bad Request"},
              "404": {"description": "Not found"}
          }
        },
        "options": {
          "tags": ["packages"],
          "summary": "Options packages",
          "operationId": "packageOptions",
          "consumes": ["*/*"],
          "produces": ["application/json"],
          "parameters": [],
          "responses": {
            "200": { "description": "OK"}          
          }
        }
      },
      "/packages/on-change": {
        "post": {
            "summary": "Uploads a package",
            "consumes": ["application/json"],
            "produces": ["application/json"],
            "parameters": [
              {
                "in": "body",
                "name": "onChangeEvent",
                "description": "Pet object that needs to be added to the store",
                "required": true,
                "schema": { "$ref": "#/definitions/OnPackageChangeEvent"}
              }
             ],
            "operationId": "postOnChangeEvent",
            "tags": ["packages"],
            "responses": {
                "200": { 
                  "description": "OK, the package upload request has been accepted", 
                  "schema": {} 
                },
                "400": { "description": "Bad Request", "schema": {} }
            }
        }
      },
      "/packages/{package_uuid}": {
        "get": {
          "tags": ["packages"],
          "summary": "Query a specific package meta-data",
          "parameters": [
            {
              "name": "package_uuid",
              "in": "path",
              "required": true,
              "description": "UUID of the package which file is required",
              "type": "string",
              "format": "uuid"
            }
          ],
          "operationId": "queryPackage",
          "responses": {
              "200": { "description": "OK, the package query request has been accepted"},
              "400": { "description": "Bad Request" }
          }
        },
        "delete": {
          "tags": ["packages"],
          "summary": "Delete a specific package (meta-data and files)",
          "parameters": [
            {
              "name": "package_uuid",
              "in": "path",
              "description": "UUID of the package to be deleted",
              "required": true,
              "type": "string",
              "format": "uuid"
            }
          ],
          "consumes": ["*/*"],
          "produces": ["application/json"],
          "responses": {
            "204": { "description": "No Content"},
            "400": { "description": "Bad request"},
            "404": { "description": "Not found"}
          }
        }
      },
      "/packages/{package_uuid}/package-file": {
        "get": {
          "tags": ["packages"],
          "summary": "Fetch a specific package file",
          "parameters": [
            {
              "name": "package_uuid",
              "in": "path",
              "required": true,
              "description": "UUID of the package which file is required",
              "type": "string",
              "format": "uuid"
            }
          ],
          "consumes": ["*/*"],
          "produces": ["application/zip"],
          "responses": {
            "200": { "description": "OK", "schema":{ "type":"string", "format":"binary" } },
            "400": { "description": "Bad request"},
            "404": { "description": "Not found"}
          }
        }
      },
      "/packages/{package_uuid}/files/{file_uuid}": {
        "get": {
          "tags": ["packages"],
          "summary": "Fetch a specific file from within the package",
          "parameters": [
            {
              "name": "package_uuid",
              "in": "path",
              "required": true,
              "description": "UUID of the package which file is required",
              "type": "string",
              "format": "uuid"
            },
            {
              "name": "file_uuid",
              "in": "path",
              "required": true,
              "description": "UUID of the file that is required",
              "type": "string",
              "format": "uuid"
            }
          ],
          "consumes": ["*/*"],
          "produces": ["application/octet-stream"],
          "responses": {
            "200": { "description": "OK", "schema":{ "type":"string", "format":"binary"}},
            "400": { "description": "Bad request"},
            "404": { "description": "Not found"}
          }
        }
      },
      "/packages/status/{process_uuid}": {
        "get": {
          "tags": ["packages"],
          "summary": "Returns the status of a given package on-boarding process",
          "operationId": "returnPackageOnboardingStatus",
          "consumes": ["*/*"],
          "produces": ["application/json"],
          "parameters": [
            {
              "name": "process_uuid",
              "in": "path",
              "required": true,
              "description": "The process UUID returned when the package was initially uploaded",
              "type": "string",
              "format": "uuid"
            }
          ],
          "responses": {
            "200": { "description": "OK"},
            "400": { "description": "Bad request"},
            "404": { "description": "Not found"}
          }
        }
      },
      "/pings": {
         "get": {
            "tags": [
               "pings"
            ],
            "summary": "Returns time since started",
            "operationId": "returnPong",
            "consumes": [
               "*/*"
            ],
            "produces": [
               "application/json"
            ],
            "parameters": [],
            "responses": {
               "200": {
                  "description": "OK"
               }
            }
         }
      },
      "/policies": {
          			"get": {
          				"tags": ["policies"],
          				"summary": "listPolicies",
          				"operationId": "listPoliciesUsingGET",
          				"produces": ["*/*"],
          				"responses": {
          					"200": {
          						"description": "OK",
          						"schema": {
          							"$ref": "#/definitions/ResponseEntity"
          						}
          					},
          					"401": {
          						"description": "Unauthorized"
          					},
          					"403": {
          						"description": "Forbidden"
          					},
          					"404": {
          						"description": "Not Found"
          					}
          				}
          			},
          			"post": {
          				"tags": ["policies"],
          				"summary": "createPolicyDescriptor",
          				"operationId": "createPolicyDescriptorUsingPOST",
          				"consumes": ["application/json"],
          				"produces": ["*/*"],
          				"parameters": [{
          					"in": "body",
          					"name": "tobject",
          					"description": "tobject",
          					"required": true,
          					"schema": {
          						"type": "string"
          					}
          				}],
          				"responses": {
          					"200": {
          						"description": "OK",
          						"schema": {
          							"$ref": "#/definitions/ResponseEntity"
          						}
          					},
          					"201": {
          						"description": "Created"
          					},
          					"401": {
          						"description": "Unauthorized"
          					},
          					"403": {
          						"description": "Forbidden"
          					},
          					"404": {
          						"description": "Not Found"
          					}
          				}
          			},
          			"put": {
          				"tags": ["policies"],
          				"summary": "updatePolicyDescriptor",
          				"operationId": "updatePolicyDescriptorUsingPUT",
          				"consumes": ["application/json"],
          				"produces": ["*/*"],
          				"parameters": [{
          					"in": "body",
          					"name": "tobject",
          					"description": "tobject",
          					"required": true,
          					"schema": {
          						"type": "string"
          					}
          				}],
          				"responses": {
          					"200": {
          						"description": "OK",
          						"schema": {
          							"$ref": "#/definitions/ResponseEntity"
          						}
          					},
          					"201": {
          						"description": "Created"
          					},
          					"401": {
          						"description": "Unauthorized"
          					},
          					"403": {
          						"description": "Forbidden"
          					},
          					"404": {
          						"description": "Not Found"
          					}
          				}
          			}
      },
      "/policies/actions": {
          			"get": {
          				"tags": ["policies"],
          				"summary": "listActions",
          				"operationId": "listActionsUsingGET",
          				"produces": ["*/*"],
          				"responses": {
          					"200": {
          						"description": "OK",
          						"schema": {
          							"type": "string"
          						}
          					},
          					"401": {
          						"description": "Unauthorized"
          					},
          					"403": {
          						"description": "Forbidden"
          					},
          					"404": {
          						"description": "Not Found"
          					}
          				}
          			}
      },
      "/policies/actions/counter": {
          			"get": {
          				"tags": ["policies"],
          				"summary": "num_of_actions",
          				"operationId": "num_of_actionsUsingGET",
          				"produces": ["*/*"],
          				"responses": {
          					"200": {
          						"description": "OK",
          						"schema": {
          							"type": "string"
          						}
          					},
          					"401": {
          						"description": "Unauthorized"
          					},
          					"403": {
          						"description": "Forbidden"
          					},
          					"404": {
          						"description": "Not Found"
          					}
          				}
          			}
      },
      "/policies/activate/{nsr_id}/{runtimepolicy_id}": {
          			"get": {
          				"tags": ["policies"],
          				"summary": "activate",
          				"operationId": "activateUsingGET",
          				"produces": ["*/*"],
          				"parameters": [{
          					"name": "nsr_id",
          					"in": "path",
          					"description": "nsr_id",
          					"required": true,
          					"type": "string"
          				}, {
          					"name": "runtimepolicy_id",
          					"in": "path",
          					"description": "runtimepolicy_id",
          					"required": true,
          					"type": "string"
          				}],
          				"responses": {
          					"200": {
          						"description": "OK",
          						"schema": {
          							"$ref": "#/definitions/ResponseEntity"
          						}
          					},
          					"401": {
          						"description": "Unauthorized"
          					},
          					"403": {
          						"description": "Forbidden"
          					},
          					"404": {
          						"description": "Not Found"
          					}
          				}
          			}
      },
      "/policies/bind/{policy_uuid}": {
          			"patch": {
          				"tags": ["policies"],
          				"summary": "bindRuntimePolicyWithSla",
          				"operationId": "bindRuntimePolicyWithSlaUsingPATCH",
          				"consumes": ["application/json"],
          				"produces": ["*/*"],
          				"parameters": [{
          					"in": "body",
          					"name": "tobject",
          					"description": "tobject",
          					"required": true,
          					"schema": {
          						"$ref": "#/definitions/RuntimePolicy"
          					}
          				}, {
          					"name": "policy_uuid",
          					"in": "path",
          					"description": "policy_uuid",
          					"required": true,
          					"type": "string"
          				}],
          				"responses": {
          					"200": {
          						"description": "OK",
          						"schema": {
          							"$ref": "#/definitions/ResponseEntity"
          						}
          					},
          					"204": {
          						"description": "No Content"
          					},
          					"401": {
          						"description": "Unauthorized"
          					},
          					"403": {
          						"description": "Forbidden"
          					}
          				}
          			}
      },
      "/policies/clone/{policy_uuid}": {
          			"get": {
          				"tags": ["policies"],
          				"summary": "clonePolicy",
          				"operationId": "clonePolicyUsingGET",
          				"produces": ["*/*"],
          				"parameters": [{
          					"name": "policy_uuid",
          					"in": "path",
          					"description": "policy_uuid",
          					"required": true,
          					"type": "string"
          				}],
          				"responses": {
          					"200": {
          						"description": "OK",
          						"schema": {
          							"$ref": "#/definitions/ResponseEntity"
          						}
          					},
          					"401": {
          						"description": "Unauthorized"
          					},
          					"403": {
          						"description": "Forbidden"
          					},
          					"404": {
          						"description": "Not Found"
          					}
          				}
          			}
      },
      "/policies/counter": {
          			"get": {
          				"tags": ["policies"],
          				"summary": "num_of_policies",
          				"operationId": "num_of_policiesUsingGET",
          				"produces": ["*/*"],
          				"responses": {
          					"200": {
          						"description": "OK",
          						"schema": {
          							"type": "string"
          						}
          					},
          					"401": {
          						"description": "Unauthorized"
          					},
          					"403": {
          						"description": "Forbidden"
          					},
          					"404": {
          						"description": "Not Found"
          					}
          				}
          			}
      },
      "/policies/deactivate/{nsr_id}": {
          			"get": {
          				"tags": ["policies"],
          				"summary": "deactivate",
          				"operationId": "deactivateUsingGET",
          				"produces": ["*/*"],
          				"parameters": [{
          					"name": "nsr_id",
          					"in": "path",
          					"description": "nsr_id",
          					"required": true,
          					"type": "string"
          				}],
          				"responses": {
          					"200": {
          						"description": "OK",
          						"schema": {
          							"$ref": "#/definitions/ResponseEntity"
          						}
          					},
          					"401": {
          						"description": "Unauthorized"
          					},
          					"403": {
          						"description": "Forbidden"
          					},
          					"404": {
          						"description": "Not Found"
          					}
          				}
          			}
      },
      "/policies/default/{policy_uuid}": {
          			"patch": {
          				"tags": ["policies"],
          				"summary": "updateRuntimePolicyasDefault",
          				"operationId": "updateRuntimePolicyasDefaultUsingPATCH",
          				"consumes": ["application/json"],
          				"produces": ["*/*"],
          				"parameters": [{
          					"in": "body",
          					"name": "tobject",
          					"description": "tobject",
          					"required": true,
          					"schema": {
          						"$ref": "#/definitions/RuntimePolicy"
          					}
          				}, {
          					"name": "policy_uuid",
          					"in": "path",
          					"description": "policy_uuid",
          					"required": true,
          					"type": "string"
          				}],
          				"responses": {
          					"200": {
          						"description": "OK",
          						"schema": {
          							"$ref": "#/definitions/ResponseEntity"
          						}
          					},
          					"204": {
          						"description": "No Content"
          					},
          					"401": {
          						"description": "Unauthorized"
          					},
          					"403": {
          						"description": "Forbidden"
          					}
          				}
          			}
      },
      "/policies/pings": {
          			"get": {
          				"tags": ["policies"],
          				"summary": "pings",
          				"operationId": "pingsUsingGET",
          				"produces": ["*/*"],
          				"responses": {
          					"200": {
          						"description": "OK",
          						"schema": {
          							"type": "string"
          						}
          					},
          					"401": {
          						"description": "Unauthorized"
          					},
          					"403": {
          						"description": "Forbidden"
          					},
          					"404": {
          						"description": "Not Found"
          					}
          				}
          			}
      },
      "/policies/placement": {
          			"get": {
          				"tags": ["policies"],
          				"summary": "listPlacementPolicies",
          				"operationId": "listPlacementPoliciesUsingGET",
          				"produces": ["*/*"],
          				"responses": {
          					"200": {
          						"description": "OK",
          						"schema": {
          							"$ref": "#/definitions/ResponseEntity"
          						}
          					},
          					"401": {
          						"description": "Unauthorized"
          					},
          					"403": {
          						"description": "Forbidden"
          					},
          					"404": {
          						"description": "Not Found"
          					}
          				}
          			},
          			"post": {
          				"tags": ["policies"],
          				"summary": "createPlacementPolicy",
          				"operationId": "createPlacementPolicyUsingPOST",
          				"consumes": ["application/json"],
          				"produces": ["*/*"],
          				"parameters": [{
          					"in": "body",
          					"name": "tobject",
          					"description": "tobject",
          					"required": true,
          					"schema": {
          						"type": "string"
          					}
          				}],
          				"responses": {
          					"200": {
          						"description": "OK",
          						"schema": {
          							"$ref": "#/definitions/ResponseEntity"
          						}
          					},
          					"201": {
          						"description": "Created"
          					},
          					"401": {
          						"description": "Unauthorized"
          					},
          					"403": {
          						"description": "Forbidden"
          					},
          					"404": {
          						"description": "Not Found"
          					}
          				}
          			}
      },
      "/policies/ui": {
          			"post": {
          				"tags": ["policies"],
          				"summary": "createPolicyDescriptorFromUI",
          				"operationId": "createPolicyDescriptorFromUIUsingPOST",
          				"consumes": ["application/json"],
          				"produces": ["*/*"],
          				"parameters": [{
          					"in": "body",
          					"name": "tobject",
          					"description": "tobject",
          					"required": true,
          					"schema": {
          						"type": "string"
          					}
          				}],
          				"responses": {
          					"200": {
          						"description": "OK",
          						"schema": {
          							"$ref": "#/definitions/ResponseEntity"
          						}
          					},
          					"201": {
          						"description": "Created"
          					},
          					"401": {
          						"description": "Unauthorized"
          					},
          					"403": {
          						"description": "Forbidden"
          					},
          					"404": {
          						"description": "Not Found"
          					}
          				}
          			}
      },
      "/policies/{policy_uuid}": {
          			"get": {
          				"tags": ["policies"],
          				"summary": "getPolicy",
          				"operationId": "getPolicyUsingGET",
          				"produces": ["*/*"],
          				"parameters": [{
          					"name": "policy_uuid",
          					"in": "path",
          					"description": "policy_uuid",
          					"required": true,
          					"type": "string"
          				}],
          				"responses": {
          					"200": {
          						"description": "OK",
          						"schema": {
          							"$ref": "#/definitions/ResponseEntity"
          						}
          					},
          					"401": {
          						"description": "Unauthorized"
          					},
          					"403": {
          						"description": "Forbidden"
          					},
          					"404": {
          						"description": "Not Found"
          					}
          				}
          			},
          			"delete": {
          				"tags": ["policies"],
          				"summary": "deletePolicyDescriptor",
          				"operationId": "deletePolicyDescriptorUsingDELETE",
          				"produces": ["*/*"],
          				"parameters": [{
          					"name": "policy_uuid",
          					"in": "path",
          					"description": "policy_uuid",
          					"required": true,
          					"type": "string"
          				}],
          				"responses": {
          					"200": {
          						"description": "OK",
          						"schema": {
          							"$ref": "#/definitions/ResponseEntity"
          						}
          					},
          					"204": {
          						"description": "No Content"
          					},
          					"401": {
          						"description": "Unauthorized"
          					},
          					"403": {
          						"description": "Forbidden"
          					}
          				}
          			}
      },
      "/records/functions": {
          "get": {
              "tags": ["records"],
              "responses": {
                  "200": {
                      "description": "Success",
                      "headers": {
                          "Content-Type": {
                              "description": "Through this endpoint GET request, the Records returns a JSON formatted paginated list of VNF records.",
                              "type": "string",
                              "maximum": 1,
                              "minimum": 1
                          }
                      }
                  },
                  "500": {
                      "description": "Error",
                      "headers": {
                          "Content-Type": {
                              "description": "Error Establishing a Database Connection.",
                              "type": "string",
                              "maximum": 1,
                              "minimum": 1
                          }
                      }
                  }
              }
          }
      },
      "/records/functions/{vnf_instance_id}": {
          "get": {
              "tags": ["records"],
              "parameters": [
                {
                  "name": "vnf_instance_id",
                  "in": "path",
                  "description": "UUID of the function instance record which is required",
                  "required": true,
                  "type": "string",
                  "format": "uuid"
                }
              ],
              "responses": {
                  "200": {
                      "description": "Success",
                      "headers": {
                          "Content-Type": {
                              "description": "Through this endpoint GET request, the Records returns a JSON of vnf record requested.",
                              "type": "string",
                              "maximum": 1,
                              "minimum": 1
                          }
                      }
                  },
                  "422": {
                      "description": "Error",
                      "headers": {
                          "Content-Type": {
                              "description": "Error parsing Json.",
                              "type": "string",
                              "maximum": 1,
                              "minimum": 1
                          }
                      }
                  },
                  "409": {
                      "description": "Error",
                      "headers": {
                          "Content-Type": {
                              "description": "Duplicated trr UUID.",
                              "type": "string",
                              "maximum": 1,
                              "minimum": 1
                          }
                      }
                  },
                  "404": {
                      "description": "Error",
                      "headers": {
                          "Content-Type": {
                              "description": "DocumentNotFound.",
                              "type": "string",
                              "maximum": 1,
                              "minimum": 1
                          }
                      }
                  }
              }
          }
      },
      "/records/services": {
          "get": {
              "tags": ["records"],
              "responses": {
                  "200": {
                      "description": "Success",
                      "headers": {
                          "Content-Type": {
                              "description": "List all ns-instances",
                              "type": "string",
                              "maximum": 1,
                              "minimum": 1
                          }
                      }
                  },
                  "404": {
                      "description": "Error",
                      "headers": {
                          "Content-Type": {
                              "description": "nsr: No requests were found",
                              "type": "string",
                              "maximum": 1,
                              "minimum": 1
                          }
                      }
                  },
                  "500": {
                      "description": "Error",
                      "headers": {
                          "Content-Type": {
                              "description": "Error Establishing a Database Connection",
                              "type": "string",
                              "maximum": 1,
                              "minimum": 1
                          }
                      }
                  }
              }
          }
      },
      "/records/services/{nsr_id}": {
          "get": {
              "tags": ["records"],
              "parameters": [
                {
                  "name": "nsr_id",
                  "in": "path",
                  "description": "UUID of the service instance record which is required",
                  "required": true,
                  "type": "string",
                  "format": "uuid"
                }
              ],
              "responses": {
                  "200": {
                      "description": "Success",
                      "headers": {
                          "Content-Type": {
                              "description": "get a ns-instance",
                              "type": "string",
                              "maximum": 1,
                              "minimum": 1
                          }
                      }
                  },
                  "415": {
                      "description": "Error",
                      "headers": {
                          "Content-Type": {
                              "description": "invalid format",
                              "type": "string",
                              "maximum": 1,
                              "minimum": 1
                          }
                      }
                  }
              }
          }
      },
      "/requests": {
         "post": {
            "tags": ["requests"],
            "summary": "Creates a request",
            "consumes": ["application/json"],
            "produces": ["application/json"],
            "parameters": [
               {
                  "in": "body",
                  "name": "uuid",
                  "description": "The UUID of the entity to which the request is related to (Service or Slice)",
                  "schema": {
                     "$ref": "#/definitions/RequestData"
                  }
               }
            ],
            "responses": {
               "201": {"description": "OK"},
               "400": {"description": "Bad Request"}
            }
         },
         "get": {
            "tags": ["requests"],
            "summary": "Queries requests",
            "consumes": [
               "application/json"
            ],
            "produces": [
               "application/json"
            ],
            "parameters": [
               {
                  "in": "body",
                  "name": "id",
                  "description": "The UUID of the request",
                  "schema": {
                     "$ref": "#/definitions/RequestResponseData"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "OK"
               },
               "400": {
                  "description": "Bad Request"
               },
               "404": {
                  "description": "Not found"
               }
            }
         }
      },
      "/services": {
        "get": {
          "tags": ["services"],
          "summary": "Query services",
          "operationId": "serviceQuerying",
          "consumes": ["*/*"],
          "produces": ["application/json"],
          "parameters": [
            {
              "name": "page_size",
              "in": "query",
              "description": "The number of records to be included in a page",
              "required": false,
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            {
              "name": "page_number",
              "in": "query",
              "description": "The number of the page of records to be shown (starting in 0)",
              "required": false,
              "type": "integer",
              "format": "int32",
              "minimum": 0,
              "default": 0
            }
          ],
          "responses": {
              "200": { 
                "description": "OK",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ServicesGetMetadataReturn"
                  }
                }
              },
              "400": {"description": "Bad Request"}
          }
        },
        "options": {
          "tags": ["services"],
          "summary": "Options for services",
          "operationId": "serviceOptions",
          "consumes": ["*/*"],
          "produces": ["application/json"],
          "parameters": [],
          "responses": {
              "200": { "description": "OK"},
              "400": {"description": "Bad Request"}
          }
        }
      },
      "/services/{service_uuid}": {
        "get": {
          "tags": ["services"],
          "summary": "Query a specific service meta-data",
          "parameters": [
            {
              "name": "service_uuid",
              "in": "path",
              "description": "UUID of the service which meta-data is required",
              "required": true,
              "type": "string",
              "format": "uuid"
            }
          ],
          "consumes": ["*/*"],
          "produces": ["application/json"],
          "responses": {
            "200": { 
              "description": "OK",
              "schema":{ "$ref":"#/definitions/ServicesGetMetadataReturn"}
            },
            "400": { "description": "Bad request"},
            "404": { "description": "Not found"}
          }
        }
      },
      "/settings/monitoring": {
      },
      "/settings/vims": {
          "get": {
            "tags": [
              "settings"
            ],
            "summary": "Returns a list of VIMs existing in the DB",
            "consumes": [
              "*/*"
            ],
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "type",
                "in": "query",
                "description": "The type of VIM",
                "required": false,
                "type": "string",
                "enum": [
                  "mock",
                  "heat",
                  "k8s",
                  "endpoint",
                  "emu"
                ],
                "x-example": "heat"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/vim_json_data"
                  }
                }
              },
              "404": {
                "description": "Not found"
              }
            }
          }
      },
      "/settings/vims/{vim_uuid}": {
          "get": {
            "tags": [
              "settings"
            ],
            "summary": "Query a specific vim",
            "parameters": [
              {
                "name": "vim_uuid",
                "in": "path",
                "description": "UUID of the vim which info is required",
                "required": true,
                "type": "string",
                "format": "uuid"
              }
            ],
            "consumes": [
              "*/*"
            ],
            "produces": [
              "application/json"
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/vim_json_data"
                }
              },
              "404": {
                "description": "Not found"
              }
            }
          },
          "delete": {
            "tags": [
              "settings"
            ],
            "summary": "Delete a specific VIM",
            "parameters": [
              {
                "name": "vim_uuid",
                "in": "path",
                "description": "UUID of the vim to delete",
                "required": true,
                "type": "string",
                "format": "uuid"
              }
            ],
            "consumes": [
              "*/*"
            ],
            "produces": [
              "application/json"
            ],
            "responses": {
              "200": {
                "description": "OK"
              },
              "404": {
                "description": "Not found"
              }
            }
          }
      },
      "/settings/vims/{type}": {
          "post": {
            "tags": [
              "settings"
            ],
            "summary": "Add new VIM",
            "parameters": [
              {
                "name": "type",
                "in": "path",
                "description": "The type of VIM is required",
                "required": true,
                "type": "string",
                "enum": [
                  "mock",
                  "heat",
                  "k8s",
                  "endpoint",
                  "emu"
                ],
                "x-example": "heat"
              },
              {
                "name": "vim_json_data",
                "in": "body",
                "description": "Json file with information of VIM to store in the DB",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/vim_json_data"
                }
              }
            ],
            "consumes": [
              "application/json"
            ],
            "produces": [
              "application/json"
            ],
            "responses": {
              "201": {
                "description": "Created",
                "schema": {
                  "$ref": "#/definitions/vim_json_data"
                }
              },
              "400": {
                "description": "Bad Request"
              },
              "405": {
                "description": "Method Not Allowed"
              }
            }
          }
      },
      "/settings/vims/{type}/{vim_uuid}": {
          "patch": {
            "tags": [
              "settings"
            ],
            "summary": "Update a specific VIM",
            "parameters": [
              {
                "name": "type",
                "in": "path",
                "description": "The type of VIM is required",
                "required": true,
                "type": "string",
                "enum": [
                  "mock",
                  "heat",
                  "k8s",
                  "endpoint",
                  "emu"
                ],
                "x-example": "heat"
              },
              {
                "name": "vim_uuid",
                "in": "path",
                "description": "UUID of the vim to update",
                "required": true,
                "type": "string",
                "format": "uuid"
              },
              {
                "name": "vim_json_data",
                "in": "body",
                "description": "Json file with information of VIM to update in the DB",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/vim_json_data"
                }
              }
            ],
            "consumes": [
              "application/json"
            ],
            "produces": [
              "application/json"
            ],
            "responses": {
              "201": {
                "description": "Created",
                "schema": {
                  "$ref": "#/definitions/vim_json_data"
                }
              },
              "400": {
                "description": "Bad Request"
              },
              "404": {
                "description": "Not Found"
              }
            }
          }
      },
      "/settings/vims/heat/networks": {
          "get": {
            "tags": [
              "settings"
            ],
            "summary": "Returns a list of external networks in a given openstack",
            "consumes": [
              "*/*"
            ],
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "endpoint",
                "in": "query",
                "description": "The endpoint of heat VIM",
                "required": true,
                "type": "string",
                "x-example": "172.31.2.1"
              },
              {
                "name": "username",
                "in": "query",
                "description": "The username of heat VIM",
                "required": true,
                "type": "string",
                "x-example": "tango"
              },
              {
                "name": "password",
                "in": "query",
                "description": "The password of heat VIM",
                "required": true,
                "type": "string",
                "x-example": "t4ng0"
              },
              {
                "name": "tenant",
                "in": "query",
                "description": "The tenant of heat VIM",
                "required": true,
                "type": "string",
                "x-example": "5gtango"
              },
              {
                "name": "domain",
                "in": "query",
                "description": "The domain of heat VIM",
                "required": false,
                "type": "string",
                "x-example": "Default"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "example": {
                      "name": "external",
                      "uuid": "3283ec5d-984e-46e7-8eac-312a79b878f1"
                    },
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "The name of the external network"
                      },
                      "uuid": {
                        "type": "string",
                        "description": "The UUID of the external network"
                      }
                    }
                  }
                }
              },
              "400": {
                "description": "Bad Request"
              },
              "404": {
                "description": "Not found"
              }
            }
          }
      },
      "/settings/vims/heat/routers/{network_uuid}": {
          "get": {
            "tags": ["settings"],
            "summary": "Returns a list of routers from a given external network in a given openstack",
            "consumes": [
              "*/*"
            ],
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "network_uuid",
                "in": "path",
                "description": "UUID of the external network",
                "required": true,
                "type": "string",
                "format": "uuid",
                "x-example": "3283ec5d-984e-46e7-8eac-312a79b878f1"
              },
              {
                "name": "endpoint",
                "in": "query",
                "description": "The endpoint of heat VIM",
                "required": true,
                "type": "string",
                "x-example": "172.31.2.1"
              },
              {
                "name": "username",
                "in": "query",
                "description": "The username of heat VIM",
                "required": true,
                "type": "string",
                "x-example": "tango"
              },
              {
                "name": "password",
                "in": "query",
                "description": "The password of heat VIM",
                "required": true,
                "type": "string",
                "x-example": "t4ng0"
              },
              {
                "name": "tenant",
                "in": "query",
                "description": "The tenant of heat VIM",
                "required": true,
                "type": "string",
                "x-example": "5gtango"
              },
              {
                "name": "domain",
                "in": "query",
                "description": "The domain of heat VIM",
                "required": false,
                "type": "string",
                "x-example": "Default"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "example": {
                      "name": "tng-router",
                      "uuid": "eecdb2e2-bae8-443e-b96a-bc8871cf4ddc"
                    },
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "The name of the router"
                      },
                      "uuid": {
                        "type": "string",
                        "description": "The UUID of the router"
                      }
                    }
                  }
                }
              },
              "400": {
                "description": "Bad Request"
              },
              "404": {
                "description": "Not found"
              }
            }
          }
      },
      "/settings/wims": {
          "get": {
            "tags": [
              "wims"
            ],
            "summary": "Returns a list of WIMs existing in the DB",
            "consumes": [
              "*/*"
            ],
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "type",
                "in": "query",
                "description": "The type of WIM",
                "required": false,
                "type": "string",
                "enum": [
                  "tapi",
                  "emu"
                ],
                "x-example": "tapi"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/wim_json_data"
                  }
                }
              },
              "404": {
                "description": "Not found"
              }
            }
          }
        },
      "/settings/wims/{wim_uuid}": {
          "get": {
            "tags": [
              "wims"
            ],
            "summary": "Query a specific wim",
            "parameters": [
              {
                "name": "wim_uuid",
                "in": "path",
                "description": "UUID of the wim which info is required",
                "required": true,
                "type": "string",
                "format": "uuid"
              }
            ],
            "consumes": [
              "*/*"
            ],
            "produces": [
              "application/json"
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/wim_json_data"
                }
              },
              "404": {
                "description": "Not found"
              }
            }
          },
          "delete": {
            "tags": [
              "wims"
            ],
            "summary": "Delete a specific WIM",
            "parameters": [
              {
                "name": "wim_uuid",
                "in": "path",
                "description": "UUID of the wim to delete",
                "required": true,
                "type": "string",
                "format": "uuid"
              }
            ],
            "consumes": [
              "*/*"
            ],
            "produces": [
              "application/json"
            ],
            "responses": {
              "200": {
                "description": "OK"
              },
              "404": {
                "description": "Not found"
              }
            }
          }
        },
      "/settings/wims/{type}": {
          "post": {
            "tags": [
              "wims"
            ],
            "summary": "Add new WIM",
            "parameters": [
              {
                "name": "type",
                "in": "path",
                "description": "The type of WIM is required",
                "required": true,
                "type": "string",
                "enum": [
                  "tapi",
                  "emu"
                ],
                "x-example": "tapi"
              },
              {
                "name": "wim_json_data",
                "in": "body",
                "description": "Json file with information of WIM to store in the DB",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/wim_json_data"
                }
              }
            ],
            "consumes": [
              "application/json"
            ],
            "produces": [
              "application/json"
            ],
            "responses": {
              "201": {
                "description": "Created",
                "schema": {
                  "$ref": "#/definitions/wim_json_data"
                }
              },
              "400": {
                "description": "Bad Request"
              },
              "405": {
                "description": "Method Not Allowed"
              }
            }
          }
        },
      "/settings/wims/{type}/{wim_uuid}": {
          "patch": {
            "tags": [
              "wims"
            ],
            "summary": "Update a specific WIM",
            "parameters": [
              {
                "name": "type",
                "in": "path",
                "description": "The type of WIM is required",
                "required": true,
                "type": "string",
                "enum": [
                  "tapi",
                  "emu"
                ],
                "x-example": "tapi"
              },
              {
                "name": "wim_uuid",
                "in": "path",
                "description": "UUID of the wim to update",
                "required": true,
                "type": "string",
                "format": "uuid"
              },
              {
                "name": "wim_json_data",
                "in": "body",
                "description": "Json file with information of WIM to update in the DB",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/wim_json_data"
                }
              }
            ],
            "consumes": [
              "application/json"
            ],
            "produces": [
              "application/json"
            ],
            "responses": {
              "201": {
                "description": "Created",
                "schema": {
                  "$ref": "#/definitions/wim_json_data"
                }
              },
              "400": {
                "description": "Bad Request"
              },
              "404": {
                "description": "Not Found"
              },
              "405": {
                "description": "Method Not Allowed"
              }
            }
          }
        },
      "/slas/templates": {
        "post": {
          "responses": {
            "201": {
              "description": "Created",
              "headers": {
                "Content-Type": { "description": "The MIME type of the body of the response (\"application/json\").", "type": "string", "maximum": 1, "minimum": 1}
              },
              "schema": {
                "type": "object",
                "properties": {
                  "uuid": { "description": "The created sla descriptor uuid", "type": "string" },
                  "status": { "description": "The creation status - Success", "type": "string" }
                }
              }
            },
            "400": { "description": "Bad request: HTTP bad request" },
            "404": { "description": "Not Found: NS not found." },
            "500": { "description": "Internal Server Error." }
          },
          "operationId": "create_template",
          "parameters": [
            { "name": "nsd_uuid", "in": "formData", "required": true, "type": "string", "description": "Network Service UUID" },
            { "name": "templateName", "in": "formData", "required": true, "type": "string", "description": "Name of the SLA template" },
            { "name": "expireDate", "in": "formData", "required": true, "type": "string", "description": "Expire date of the SLA" },
            { "name": "guaranteeID", "in": "formData", "required": false, "type": "string", "description": "The ID of the SLO" },
            { "name": "service_licence_type", "in": "formData", "required": true, "type": "string", "description": "The type of the license" },
            { "name": "allowed_service_instances", "in": "formData", "required": true, "type": "string", "description": "allowed_service_instances number"},
            { "name": "service_licence_expiration_date", "in": "formData", "required": true, "type": "string", "description": "The license expiration date"},
            { "name": "provider_name", "in": "formData", "required": false, "type": "string", "description": "The provider name of the SLA. e.g. Telefonica" },
            { "name": "dflavour_name", "in": "formData", "required": false, "type": "string", "description": "The selected deployment flavour of the corresponding NS" }
          ],
          "consumes": [ "multipart/form-data"],
          "tags": [ "SLAs" ]
        },
        "get": {
          "responses": {
            "200": {
              "description": "Success",
              "headers": {"Content-Type": {"description": "The MIME type of the body of the response (\"application/json\").", "type": "string", "maximum": 1, "minimum": 1 }},
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                      "descriptor_schema": { "description": "The descriptor schema the template follows", "type": "string" },
                      "name": { "description": "The name of the sla template", "type": "string" },
                      "vendor": { "description": "The vendor of the sla template", "type": "string" },
                      "version": { "description": "The version of the sla template", "type": "string" },
                      "author": { "description": "The author/s of the sla template", "type": "string" },
                      "description": { "description": "A simple description of the sla template", "type": "string" },
                      "sla_template": {
                        "type": "object",
                        "properties": {
                          "template_name": { "description": "The user defined sla template name", "type": "string" },
                          "offer_date": { "description": "The sla template offered date", "type": "string" },
                          "expiration_date": { "description": "The sla template expiration date", "type": "string" },
                          "provider_name": { "description": "The network provider that requested the creation of the template. e.g. Telefonica.", "type": "string"},
                          "template_initiator": { "description": "The user who created the sla template", "type": "string" },
                          "service": {
                            "type": "object",
                            "properties": {
                              "ns_uuid": { "description": "The accosiated ns uuid", "type": "string" },
                              "ns_name": { "description": "The accosiated ns vendor", "type": "string" },
                              "ns_vendor": { "description": "The accosiated ns vendor", "type": "string" },
                              "ns_version": { "description": "The accosiated ns version", "type": "string" },
                              "guaranteeTerms": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "guaranteeID": { "description": "The id of the selected guarantee term", "type": "string" },
                                    "guarantee_name": { "description": "The name of the selected guarantee term", "type": "string" },
                                    "guarantee_definition": { "description": "A short definition of the selected guarantee term", "type": "string"},
                                    "guarantee_threshold": { "description": "The value of the selected guarantee term", "type": "string" },
                                    "guarantee_operator": { "description": "The operator describing the expression of the selected guarantee term", "type": "string" },
                                    "guarantee_unit": { "description": "The unit describing the selected guarantee term", "type": "string" },
                                    "guarantee_period": { "description": "The period that the guarantee term will be calculated", "type": "string" },
                                    "guarantee_service_level": { "description": "The corresponding service level", "type": "string" },
                                    "target_slo": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "target_kpi": { "description": "The target slo that is going to be monitored", "type": "string" },
                                          "target_value": { "description": "The monitoring target_value of the guarantee", "type": "string" },
                                          "target_operator": { "description": "The operator describing the realtion between the target slo and thne guaranteed threshold", "type": "string"},
                                          "target_duration": { "description": "The monitoring duration of the targeted slo", "type": "string" },
                                          "target_period": { "description": "The period that the target slo will be calculated", "type": "string" },
                                          "target_service_level": { "description": "The full expression of the guaranteed slo", "type": "string" }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "licences": {
                            "type": "object",
                            "properties": {
                              "service_based": {
                                "type": "object",
                                "properties": {
                                  "service_licence_type": { "description": "The type of the license for the NS - Public|Trial|Private", "type": "string" },
                                  "service_licence_instances": { "description": "The allowed NS instances the the license can provide", "type": "string" },
                                  "service_licence_expiration_date": { "description": "The expiration date of the license", "type": "string" }
                                }
                              }
                            }
                          }
                        }
                      }
                  }
                }
              }
            },
            "400": { "description": "Bad request: HTTP bad request" },
            "500": { "description": "Internal Server Error." }
          },
          "operationId": "get_all_sla_templates",
          "tags": [ "SLAs" ]
        }
      },
      "/slas/templates/{sla_uuid}": {
          "parameters": [{ "name": "sla_uuid", "in": "path", "type": "string", "required": true, "description": "SLA uuid" }],
          "delete": {
            "responses": {
              "200": { "description": "Success: SLA {sla_uuid} deleted!" },
              "404": { "description": "ERROR: sla_uuid Not Found" }
            },
            "operationId": "delete_sla_template",
            "tags": [ "SLAs" ]
          },
          "get": {
            "responses": {
              "200": {
                "description": "Success",
                "headers": {
                  "Content-Type": { "description": "The MIME type of the body of the response (\"application/json\").", "type": "string", "maximum": 1, "minimum": 1 }
                },
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "descriptor_schema": { "description": "The descriptor schema the template follows", "type": "string" },
                      "name": { "description": "The name of the sla template", "type": "string" },
                      "vendor": { "description": "The vendor of the sla template", "type": "string" },
                      "version": { "description": "The version of the sla template", "type": "string" },
                      "author": { "description": "The author/s of the sla template", "type": "string" },
                      "description": { "description": "A simple description of the sla template", "type": "string" },
                      "sla_template": {
                        "type": "object",
                        "properties": {
                          "template_name": { "description": "The user defined sla template name", "type": "string" },
                          "offer_date": { "description": "The sla template offered date", "type": "string" },
                          "expiration_date": { "description": "The sla template expiration date", "type": "string" },
                          "provider_name": { "description": "The network provider that requested the creation of the template. e.g. Telefonica.", "type": "string" },
                          "template_initiator": { "description": "The user who created the sla template", "type": "string" },
                          "service": {
                            "type": "object",
                            "properties": {
                              "ns_uuid": { "description": "The accosiated ns uuid", "type": "string" },
                              "ns_name": { "description": "The accosiated ns vendor", "type": "string" },
                              "ns_vendor": { "description": "The accosiated ns vendor", "type": "string" },
                              "ns_version": { "description": "The accosiated ns version", "type": "string" },
                              "guaranteeTerms": { 
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "guaranteeID": {"description": "The id of the selected guarantee term","type": "string"},
                                    "guarantee_name": {"description": "The name of the selected guarantee term","type": "string"},
                                    "guarantee_definition": {"description": "A short definition of the selected guarantee term","type": "string"},
                                    "guarantee_threshold": {"description": "The value of the selected guarantee term","type": "string"},
                                    "guarantee_operator": {"description": "The operator describing the expression of the selected guarantee term","type": "string"},
                                    "guarantee_unit": {"description": "The unit describing the selected guarantee term","type": "string"},
                                    "guarantee_period": {"description": "The period that the guarantee term will be calculated","type": "string"},
                                    "guarantee_service_level": {"description": "The corresponding service level","type": "string"},
                                    "target_slo": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "target_kpi": {"description": "The target slo that is going to be monitored","type": "string"},
                                          "target_value": {"description": "The monitoring target_value of the guarantee","type": "string"},
                                          "target_operator": {"description": "The operator describing the realtion between the target slo and thne guaranteed threshold","type": "string"},
                                          "target_duration": {"description": "The monitoring duration of the targeted slo","type": "string"},
                                          "target_period": {"description": "The period that the target slo will be calculated","type": "string"},
                                          "target_service_level": {"description": "The full expression of the guaranteed slo","type": "string"}
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "licences": {
                                "type": "object",
                                "properties": {
                                  "service_based": {
                                    "type": "object",
                                    "properties": {
                                      "service_licence_type": {"description": "The type of the license for the NS - Public|Trial|Private","type": "string"},
                                      "service_licence_instances": {"description": "The allowed NS instances the the license can provide","type": "string" },
                                      "service_licence_expiration_date": {"description": "The expiration date of the license","type": "string"}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "404": { "description": "ERROR: SLA Not Found" }
            },
            "operationId": "get_sla_by_uuid",
            "tags": [ "SLAs"]
          }
      },
      "/slas/templates/services/{nsd_uuid}": {
        "parameters": [{"name": "nsd_uuid","in": "path","type": "string","required": true,"description": "Ns  uuid"}],
          "get": {
            "responses": {
               "200": {
                   "description": "Success",
                   "headers": {
                     "Content-Type": {"description": "The MIME type of the body of the response (\"application/json\").","type": "string","maximum": 1,"minimum": 1}
                   },
                   "schema": {
                     "type": "array",
                     "items": {
                       "type": "object",
                       "properties": {
                         "uuid": {"description": "The uuid of the sla template","type": "string"},
                         "name": {"description": "The name of the sla template","type": "string"},
                         "vendor": {"description": "The vendor of the sla template","type": "string"},
                         "version": {"description": "The version of the sla template","type": "string"},
                         "license_type": {"description": "The license type of the sla template","type": "string"},
                         "license_exp_date": {"description": "The license exp date of the license in the sla","type": "string"},
                         "allowed_instances": {"description": "The allowed_instances of the license in the sla","type": "string"},
                         "d_flavor": {"description": "The d_flavor mapped in the sla template","type": "string"}
                       }
                     }
                   }
                 },
               "404": {"description": "Warning: SLA Templates for nsd_uuid not found!"}
            },
            "operationId": "get_sla_by_service",
            "tags": ["SLAs"]
          }
      },
      "/slas/agreements": {
        "get": {
          "responses": {
            "200": {
              "description": "Success",
              "headers": {"Content-Type": {"description": "The MIME type of the body of the response (\"application/json\").","type": "string","maximum": 1,"minimum": 1}},
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                               "ns_uuid": {"description": "The uuid of the accosiated NS","type": "string"},
                               "ns_name": {"description": "The name of the  accosiated NS","type": "string"},
                               "sla_uuid": {"description": "The uuid of the accosiated NS","type": "string"},
                               "sla_name": {"description": "The name of the accosiated NS","type": "string"},
                               "sla_date": {"description": "The date when the agreement was created","type": "string"},
                               "sla_status": {
                               "description": "The status of the agreement.","type": "string"},
                               "cust_username": {"description": "The cust_username of the customer who signed the aqgreement","type": "string"},
                               "cust_email": {"description": "The email of the customer who signed the aqgreement","type": "string"},
                               "inst_status": {"description": "The status of the agreement (pending, ready, terminated)","type": "string"},
                               "correlation_id": {"description": "The correlation_id that reference to the nsi record","type": "string"},
                               "nsi_uuid": {"description": "The NS Instance uuid that is accosiated to.","type": "string"}
                             }
                }
              }
            },
            "400": {"description": "Bad request: HTTP bad request"}
           },
           "operationId": "all-active-agreements",
           "tags": [ "SLAs" ]
        }
      },
      "/slas/agreements/all": {
                  "get": {
                      "responses": {
                          "200": {
                              "description": "Success",
                              "headers": {
                                  "Content-Type": {
                                      "description": "The MIME type of the body of the response (\"application/json\").",
                                      "type": "string",
                                      "maximum": 1,
                                      "minimum": 1
                                  }
                              },
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "type": "object",
                                      "properties": {
                                          "ns_uuid": {
                                              "description": "The uuid of the accosiated NS",
                                              "type": "string"
                                          },
                                          "ns_name": {
                                              "description": "The name of the  accosiated NS",
                                              "type": "string"
                                          },
                                          "sla_uuid": {
                                              "description": "The uuid of the accosiated NS",
                                              "type": "string"
                                          },
                                          "sla_name": {
                                              "description": "The name of the accosiated NS",
                                              "type": "string"
                                          },
                                          "sla_date": {
                                              "description": "The date when the agreement was created",
                                              "type": "string"
                                          },
                                          "sla_status": {
                                              "description": "The status of the agreement.",
                                              "type": "string"
                                          },
                                          "cust_username": {
                                              "description": "The cust_username of the customer who signed the aqgreement",
                                              "type": "string"
                                          },
                                          "cust_email": {
                                              "description": "The email of the customer who signed the aqgreement",
                                              "type": "string"
                                          },
                                          "inst_status": {
                                              "description": "The status of the agreement (pending, ready, terminated)",
                                              "type": "string"
                                          },
                                          "correlation_id": {
                                              "description": "The correlation_id that reference to the nsi record",
                                              "type": "string"
                                          },
                                          "nsi_uuid": {
                                              "description": "The NS Instance uuid that is accosiated to.",
                                              "type": "string"
                                          }
                                      }
                                  }
                              }
                          },
                          "400": {"description": "Bad request: HTTP bad request"
                          }
                      },
                      "operationId": "all-agreements",
                      "tags": [
                          "SLAs"
                      ]
                  }
              },
      "/slas/agreements/{sla_uuid}/{nsi_uuid}": {
                  "parameters": [
                      {
                          "name": "sla_uuid",
                          "in": "path",
                          "required": true,
                          "type": "string",
                          "description": "The ID of the SLA"
                      },
                      {
                          "name": "nsi_uuid",
                          "in": "path",
                          "required": true,
                          "type": "string",
                          "description": "The ID of the corresponding NS - the instantiated NS"
                      }
                  ],
                  "get": {
                      "responses": {
                          "200": {
                              "description": "Success",
                              "headers": {
                                  "Content-Type": {
                                      "description": "The MIME type of the body of the response (\"application/json\").",
                                      "type": "string",
                                      "maximum": 1,
                                      "minimum": 1
                                  }
                              },
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "type": "object",
                                      "properties": {
                                          "descriptor_schema": {
                                              "description": "The descriptor schema the template follows",
                                              "type": "string"
                                          },
                                          "name": {
                                              "description": "The name of the sla template",
                                              "type": "string"
                                          },
                                          "vendor": {
                                              "description": "The vendor of the sla template",
                                              "type": "string"
                                          },
                                          "version": {
                                              "description": "The version of the sla template",
                                              "type": "string"
                                          },
                                          "author": {
                                              "description": "The author/s of the sla template",
                                              "type": "string"
                                          },
                                          "description": {
                                              "description": "A simple description of the sla template",
                                              "type": "string"
                                          },
                                          "sla_template": {
                                              "type": "object",
                                              "properties": {
                                                  "template_name": {
                                                      "description": "The user defined sla template name",
                                                      "type": "string"
                                                  },
                                                  "offer_date": {
                                                      "description": "The sla template offered date",
                                                      "type": "string"
                                                  },
                                                  "expiration_date": {
                                                      "description": "The sla template expiration date",
                                                      "type": "string"
                                                  },
                                                  "provider_name": {
                                                      "description": "The network provider that requested the creation of the template. e.g. Telefonica.",
                                                      "type": "string"
                                                  },
                                                  "template_initiator": {
                                                      "description": "The user who created the sla template",
                                                      "type": "string"
                                                  },
                                                  "service": {
                                                      "type": "object",
                                                      "properties": {
                                                          "ns_uuid": {
                                                              "description": "The accosiated ns uuid",
                                                              "type": "string"
                                                          },
                                                          "ns_name": {
                                                              "description": "The accosiated ns vendor",
                                                              "type": "string"
                                                          },
                                                          "ns_vendor": {
                                                              "description": "The accosiated ns vendor",
                                                              "type": "string"
                                                          },
                                                          "ns_version": {
                                                              "description": "The accosiated ns version",
                                                              "type": "string"
                                                          },
                                                          "guaranteeTerms": {
                                                              "type": "array",
                                                              "items": {
                                                                  "type": "object",
                                                                  "properties": {
                                                                      "guaranteeID": {
                                                                          "description": "The id of the selected guarantee term",
                                                                          "type": "string"
                                                                      },
                                                                      "guarantee_name": {
                                                                          "description": "The name of the selected guarantee term",
                                                                          "type": "string"
                                                                      },
                                                                      "guarantee_definition": {
                                                                          "description": "A short definition of the selected guarantee term",
                                                                          "type": "string"
                                                                      },
                                                                      "guarantee_threshold": {
                                                                          "description": "The value of the selected guarantee term",
                                                                          "type": "string"
                                                                      },
                                                                      "guarantee_operator": {
                                                                          "description": "The operator describing the expression of the selected guarantee term",
                                                                          "type": "string"
                                                                      },
                                                                      "guarantee_unit": {
                                                                          "description": "The unit describing the selected guarantee term",
                                                                          "type": "string"
                                                                      },
                                                                      "guarantee_period": {
                                                                          "description": "The period that the guarantee term will be calculated",
                                                                          "type": "string"
                                                                      },
                                                                      "guarantee_service_level": {
                                                                          "description": "The corresponding service level",
                                                                          "type": "string"
                                                                      },
                                                                      "target_slo": {
                                                                          "type": "array",
                                                                          "items": {
                                                                              "type": "object",
                                                                              "properties": {
                                                                                  "target_kpi": {
                                                                                      "description": "The target slo that is going to be monitored",
                                                                                      "type": "string"
                                                                                  },
                                                                                  "target_value": {
                                                                                      "description": "The monitoring target_value of the guarantee",
                                                                                      "type": "string"
                                                                                  },
                                                                                  "target_operator": {
                                                                                      "description": "The operator describing the realtion between the target slo and thne guaranteed threshold",
                                                                                      "type": "string"
                                                                                  },
                                                                                  "target_duration": {
                                                                                      "description": "The monitoring duration of the targeted slo",
                                                                                      "type": "string"
                                                                                  },
                                                                                  "target_period": {
                                                                                      "description": "The period that the target slo will be calculated",
                                                                                      "type": "string"
                                                                                  },
                                                                                  "target_service_level": {
                                                                                      "description": "The full expression of the guaranteed slo",
                                                                                      "type": "string"
                                                                                  }
                                                                              }
                                                                          }
                                                                      }
                                                                  }
                                                              }
                                                          },
                                                          "licences": {
                                                              "type": "object",
                                                              "properties": {
                                                                  "service_based": {
                                                                      "type": "object",
                                                                      "properties": {
                                                                          "service_licence_type": {
                                                                              "description": "The type of the license for the NS - Public|Trial|Private",
                                                                              "type": "string"
                                                                          },
                                                                          "service_licence_instances": {
                                                                              "description": "The allowed NS instances the the license can provide",
                                                                              "type": "string"
                                                                          },
                                                                          "service_licence_expiration_date": {
                                                                              "description": "The expiration date of the license",
                                                                              "type": "string"
                                                                          }
                                                                      }
                                                                  }
                                                              }
                                                          }
                                                      }
                                                  }
                                              }
                                          }
                                      }
                                  }
                              }
                          },
                          "404": {"description": "ERROR: SLA not found"}
                      },
                      "operationId": "get_agreement",
                      "tags": ["SLAs"]
                  }
              },
      "/slas/agreements/service/{nsi_uuid}": {
                  "parameters": [
                      {
                          "name": "nsi_uuid",
                          "in": "path",
                          "type": "string",
                          "description": "NSI uuid",
                          "required": true
                      }
                  ],
                  "get": {
                      "responses": {
                          "200": {
                              "description": "Success",
                              "headers": {
                                  "Content-Type": {
                                      "description": "The MIME type of the body of the response (\"application/json\").",
                                      "type": "string",
                                      "maximum": 1,
                                      "minimum": 1
                                  }
                              },
                              "schema": {
                                  "type": "object",
                                  "properties": {
                                      "cust_sla": {
                                          "type": "array",
                                          "items": {
                                              "type": "object",
                                              "properties": {
                                                  "ns_uuid": {
                                                      "description": "The ns_uuid",
                                                      "type": "string"
                                                  },
                                                  "sla_uuid": {
                                                      "description": "The sla_uuid",
                                                      "type": "string"
                                                  },
                                                  "cust_uuid": {
                                                      "description": "The sla_uuid",
                                                      "type": "string"
                                                  }
                                              }
                                          }
                                      }
                                  }
                              }
                          },
                          "404": {
                              "description": "NOT Found: NS not found"
                          }
                      },
                      "operationId": "agreements_per_InsNs",
                      "tags": [
                          "SLAs"
                      ]
                  }
              },
      "/slas/agreements/guarantee-terms/{sla_uuid}": {
                  "parameters": [
                      {
                          "name": "sla_uuid",
                          "in": "path",
                          "type": "string",
                          "description": "SLA uuid",
                          "required": true
                      }
                  ],
                  "get": {
                      "responses": {
                          "200": {
                              "description": "Success",
                              "headers": {
                                  "Content-Type": {
                                      "description": "The MIME type of the body of the response (\"application/json\").",
                                      "type": "string",
                                      "maximum": 1,
                                      "minimum": 1
                                  }
                              },
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "type": "object",
                                      "properties": {
                                          "guaranteeID": {
                                              "description": "The id of the selected guarantee term",
                                              "type": "string"
                                          },
                                          "guarantee_name": {
                                              "description": "The name of the selected guarantee term",
                                              "type": "string"
                                          },
                                          "guarantee_definition": {
                                              "description": "A short definition of the selected guarantee term",
                                              "type": "string"
                                          },
                                          "guarantee_threshold": {
                                              "description": "The value of the selected guarantee term",
                                              "type": "string"
                                          },
                                          "guarantee_operator": {
                                              "description": "The operator describing the expression of the selected guarantee term",
                                              "type": "string"
                                          },
                                          "guarantee_unit": {
                                              "description": "The unit describing the selected guarantee term",
                                              "type": "string"
                                          },
                                          "guarantee_period": {
                                              "description": "The period that the guarantee term will be calculated",
                                              "type": "string"
                                          },
                                          "guarantee_service_level": {
                                              "description": "The corresponding service level",
                                              "type": "string"
                                          },
                                          "target_slo": {
                                              "type": "array",
                                              "items": {
                                                  "type": "object",
                                                  "properties": {
                                                      "target_kpi": {
                                                          "description": "The target slo that is going to be monitored",
                                                          "type": "string"
                                                      },
                                                      "target_value": {
                                                          "description": "The monitoring target_value of the guarantee",
                                                          "type": "string"
                                                      },
                                                      "target_operator": {
                                                          "description": "The operator describing the realtion between the target slo and thne guaranteed threshold",
                                                          "type": "string"
                                                      },
                                                      "target_duration": {
                                                          "description": "The monitoring duration of the targeted slo",
                                                          "type": "string"
                                                      },
                                                      "target_period": {
                                                          "description": "The period that the target slo will be calculated",
                                                          "type": "string"
                                                      },
                                                      "target_service_level": {
                                                          "description": "The full expression of the guaranteed slo",
                                                          "type": "string"
                                                      }
                                                  }
                                              }
                                          }
                                      }
                                  }
                              }
                          },
                          "404": {
                              "description": "ERROR: Not Found!"
                          }
                      },
                      "operationId": "guarantees_per_sla",
                      "tags": [
                          "SLAs"
                      ]
                  }
              },
      "/slas/agreements/{nsi_uuid}": {
                  "parameters": [
                      {
                          "name": "nsi_uuid",
                          "in": "path",
                          "type": "string",
                          "required": true,
                          "description": "Network Service Instance uuid"
                      }
                  ],
                  "delete": {
                      "responses": {
                          "200": {
                              "description": "Success: Agreement was deleted successfully."
                          },
                          "400": {
                              "description": "ERROR: Agreement cannot be deleted because it's active."
                          },
                          "404": {
                              "description": "ERROR: Agreement cannot be deleted."
                          }
                      },
                      "operationId": "delete_sla_agreement",
                      "tags": [
                          "SLAs"
                      ]
                  }
              },
      "/slas/agreements/customer": {
                  "get": {
                      "responses": {
                          "200": {
                              "description": "Success: Agreement was deleted successfully.",
                              "schema": {
                                  "type": "object",
                                  "properties": {
                                      "ns_uuid": {
                                          "description": "The ns_uuid",
                                          "type": "string"
                                      },
                                      "nsi_uuid": {
                                          "description": "The nsi_uuid",
                                          "type": "string"
                                      },
                                      "sla_uuid": {
                                          "description": "The sla_uuid",
                                          "type": "string"
                                      },
                                      "cust_username": {
                                          "description": "The cust_username",
                                          "type": "string"
                                      }
                                  }
                              }
                          },
                          "400": {
                              "description": "ERROR: Agreement cannot be deleted because it's active."
                          },
                          "404": {
                              "description": "ERROR: Agreement cannot be deleted."
                          }
                      },
                      "operationId": "get_agreement_per_signin_customer",
                      "tags": [
                          "SLAs"
                      ]
                  }
              },
      "/slas/violations": {
        "get": {
          "responses": {
            "200": {
              "description": "Success",
              "headers": {"Content-Type": {"description": "The MIME type of the body of the response (\"application/json\").","type": "string","maximum": 1,"minimum": 1}},
              "schema": {
                "type": "object",
                "properties": {
                  "violation_time": {"description": "The SLA Violation time","type": "string"},
                  "cust_uuid": {"description": "The customer uuid who selected this SLA durng the NS instantiation process","type": "string"},
                  "ns_uuid": {"description": "The ns_uuid which is instantiated with this SLA","type": "string"},
                  "alert_state": {"description": "The alert_state of the violation alert","type": "string"},
                  "sla_uuid": {"description": "The sla_uuid of the violated SLA","type": "string"}
                }
              }
            },
            "400": {"description": "Bad request: HTTP bad request"}
          },
          "operationId": "all-violations",
          "tags": ["SLAs"]
        }
      },
      "/slas/violations/{ns_uuid}/{sla_uuid}": {
        "parameters": [
           {"name": "sla_uuid","in": "path","required": true,"type": "string","description": "The ID of the SLA"},
           {"name": "ns_uuid","in": "path","required": true,"type": "string","description": "The ID of the corresponding NS - the instantiated NS"}
        ],
        "get": {
          "responses": {
            "200": {
                              "description": "Success",
                              "headers": {"Content-Type": {"description": "The MIME type of the body of the response (\"application/json\").","type": "string","maximum": 1,"minimum": 1}},
                              "schema": {
                                  "type": "object",
                                  "properties": {
                                      "violation_time": {"description": "The SLA Violation time","type": "string"},
                                      "cust_uuid": {"description": "The customer uuid who selected this SLA durng the NS instantiation process","type": "string"},
                                      "ns_uuid": {"description": "The ns_uuid which is instantiated with this SLA","type": "string"},
                                      "alert_state": {"description": "The alert_state of the violation alert","type": "string"},
                                      "sla_uuid": {"description": "The sla_uuid of the violated SLA","type": "string"}
                                  }
                              }
                          },
            "400": {"description": "Bad HTTP request"}
          },
          "operationId": "specific-violation",
          "tags": ["SLAs"]
        }
      },
      "/slas/violations/violationspercentage": {
        "parameters": [
                      {
                          "name": "d",
                          "in": "query",
                          "required": false,
                          "type": "integer",
                          "description": "Specify the number of the last days, which we want to get the percentage"
                      }
                  ],
        "get": {
                      "responses": {
                          "200": {
                              "description": "Success",
                              "headers": {
                                  "Content-Type": {
                                      "description": "The MIME type of the body of the response (\"application/json\").",
                                      "type": "string",
                                      "maximum": 1,
                                      "minimum": 1
                                  }
                              },
                              "schema": {
                                  "type": "object",
                                  "properties": {
                                      "totalAgreements": {
                                          "description": "The number of the total agreements",
                                          "type": "string"
                                      },
                                      "percentage_violated": {
                                          "description": "The percentage of the violated agreements",
                                          "type": "string"
                                      },
                                      "percentage_active": {
                                          "description": "The percentage of the active agreements",
                                          "type": "string"
                                      }
                                  }
                              }
                          },
                          "400": {"description": "Bad HTTP request"}
                      },
                      "operationId": "violations-percentage",
                      "tags": ["SLAs"]
                  }
      },
      "/slas/licenses": {
                  "get": {
                      "responses": {
                          "200": {
                              "description": "Success",
                              "headers": {
                                  "Content-Type": {
                                      "description": "The MIME type of the body of the response (\"application/json\").",
                                      "type": "string",
                                      "maximum": 1,
                                      "minimum": 1
                                  }
                              },
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "type": "object",
                                      "properties": {
                                          "sla_uuid": {"description": "The uuid of the accosiated SLA","type": "string"},
                                          "nsd_uuid": {"description": "The uuid of the  accosiated NS","type": "string"},
                                          "nsi_uuid": {"description": "The uuid of the accosiated NS Instance","type": "string"},
                                          "cust_userrname": {"description": "The name of the customer that the license belongs to","type": "string"},
                                          "cust_email": {"description": "The email of the customer that the license belongs to","type": "string"},
                                          "license_type": {"description": "The license type (Trial|Public|Private)","type": "string"},
                                          "license_exp_date": {"description": "The license expiration date","type": "string"},
                                          "allowed_instances": {"description": "The license allowed NS instances","type": "string"},
                                          "current_instances": {"description": "The license current NS instances)","type": "string"},
                                          "license_status": {"description": "The license status (inactive|active|bought|expired)","type": "string"}
                                      }
                                  }
                              }
                          },
                          "400": {"description": "Bad request: HTTP bad request"}
                      },
                      "operationId": "all-licenses",
                      "tags": ["SLAs"]
                  },
                  "delete": {
                      "responses": {
                          "200": {"description": "License was deleted"},
                          "404": {"description": "License was not deleted"}
                      },
                      "parameters": [
                          {
                              "name": "sla_uuid",
                              "in": "formData",
                              "required": true,
                              "type": "string",
                              "description": "SLA UUID"
                          },
                          {
                              "name": "cust_username",
                              "in": "formData",
                              "required": true,
                              "type": "string",
                              "description": "Name of customer that the license belongs to"
                          },
                          {
                              "name": "ns_uuid",
                              "in": "formData",
                              "required": true,
                              "type": "string",
                              "description": "NS uuid"
                          }
                      ],
                      "consumes": ["multipart/form-data"],
                      "operationId": "delete_license",
                      "tags": ["SLAs"]
                  }
              },
      "/slas/licenses/status/{sla_uuid}/{ns_uuid}": {
        "get": {
          "parameters": [
            {"name": "sla_uuid","in": "path","required": true,"type": "string","description": "SLA UUID"},
            {"name": "ns_uuid","in": "path","required": true,"type": "string","description": "NS uuid"}
          ],
          "responses": {
                          "200": {
                              "description": "Success",
                              "headers": {
                                  "Content-Type": {
                                      "description": "The MIME type of the body of the response (\"application/json\").",
                                      "type": "string",
                                      "maximum": 1,
                                      "minimum": 1
                                  }
                              },
                              "schema": {
                                  "type": "object",
                                  "properties": {
                                      "license_type": {
                                          "description": "The license type (Trial|Private|Public)",
                                          "type": "string"
                                      },
                                      "license_status": {
                                          "description": "The license status)",
                                          "type": "string"
                                      },
                                      "allowed_instances": {
                                          "description": "The license allowed instances",
                                          "type": "string"
                                      },
                                      "current_instances": {
                                          "description": "The license cuurent instances",
                                          "type": "string"
                                      },
                                      "allowed_to_instantiate": {
                                          "description": "true|false",
                                          "type": "boolean"
                                      }
                                  }
                              }
                          },
                          "404": {"description": "ERROR:connecting to database"}
                      },
          "operationId": "get-license-status",
          "tags": ["SLAs"]
         }
      },
      "/slas/licenses/buy": {
                  "post": {
                      "responses": {
                          "201": { "description": "Success:Private license bought"},
                          "400": {"description": "Bad request: HTTP bad request"},
                          "404": {"description": "Not Found: NS not found."},
                          "500": {"description": "Internal Server Error."}
                      },
                      "parameters": [
                          {
                              "name": "ns_uuid",
                              "in": "formData",
                              "required": true,
                              "type": "string",
                              "description": "Network Service UUID"
                          },
                          {
                              "name": "sla_uuid",
                              "in": "formData",
                              "required": true,
                              "type": "string",
                              "description": "SLA UUID"
                          }
                      ],
                      "consumes": ["multipart/form-data"],
                      "tags": ["SLAs"],
                      "operationId": "buy_license"
                  }
              },
      "/slas/licenses/utilized": {
                  "get": {
                      "responses": {
                          "200": {
                              "description": "Nº Licenses Utilized",
                              "headers": {
                                  "Content-Type": {
                                      "description": "The MIME type of the body of the response (\"application/json\").",
                                      "type": "string",
                                      "maximum": 1,
                                      "minimum": 1
                                  }
                              },
                              "schema": {
                                  "type": "object",
                                  "properties": {
                                      "utilized_licenses": {
                                          "description": "The number utilized_licenses",
                                          "type": "string"
                                      }
                                  }
                              }
                          }
                      },
                      "operationId": "licenses-utilized",
                      "tags": [
                          "SLAs"
                      ]
                  }
              },
      "/slas/licenses/acquired": {
                  "get": {
                      "responses": {
                          "200": {
                              "description": "Nº Licenses acquired",
                              "headers": {
                                  "Content-Type": {
                                      "description": "The MIME type of the body of the response (\"application/json\").",
                                      "type": "string",
                                      "maximum": 1,
                                      "minimum": 1
                                  }
                              },
                              "schema": {
                                  "type": "object",
                                  "properties": {
                                      "acquired_licenses": {
                                          "description": "The number acquired licenses",
                                          "type": "string"
                                      }
                                  }
                              }
                          }
                      },
                      "operationId": "licenses-acquired",
                      "tags": [
                          "SLAs"
                      ]
                  }
              },
      "/slas/licenses/expired": {
        "get": {
          "responses": {
            "200": {
              "description": "Nº Licenses expired",
              "headers": {
                "Content-Type": {"description": "The MIME type of the body of the response (\"application/json\").","type": "string","maximum": 1,"minimum": 1}
              },
              "schema": {
                "type": "object",
                "properties": { "expired_licenses": { "description": "The number expired licenses", "type": "string" } }
              }
            }
          },
          "operationId": "licenses-expired",
          "tags": ["SLAs"]
        }
      },
      "/slices/descriptors": {
         "post": {
            "description": "**Create NST Info**: Create a NetSlice Template Info object and the whole NST item information presented as JSON. After NST creation, the Upload NST completes the on-boarding operation.\n",
            "parameters": [
               {
                  "name": "userDefinedData",
                  "description": "Data associated to a NST.",
                  "in": "body",
                  "required": true,
                  "schema": {
                     "description": "User Info associated to the NST.",
                     "type": "object",
                     "properties": {
                        "name": {
                           "description": "Name of the NetSLice Template",
                           "type": "string",
                           "format": "string"
                        },
                        "version": {
                           "description": "Version of the NetSLice Template",
                           "type": "string",
                           "format": "string"
                        },
                        "author": {
                           "description": "Author name of the NetSLice Template",
                           "type": "string",
                           "format": "string"
                        },
                        "vendor": {
                           "description": "Vendor name of the NetSLice Template",
                           "type": "string",
                           "format": "string"
                        },
                        "description": {
                           "description": "Description of the NetSLice Template",
                           "type": "string",
                           "format": "string"
                        },
                        "sliceServices": {
                           "type": "array",
                           "items": {
                              "type": "object",
                              "properties": {
                                 "servname": {
                                    "type": "string",
                                    "description": "Uuid of the Network Service to be in the Template"
                                 },
                                 "nsdID": {
                                    "type": "string",
                                    "description": "Uuid of the Network Service to be in the Template"
                                 },
                                 "slaID": {
                                    "type": "string",
                                    "description": "Uuid of the Network Service to be in the Template"
                                 }
                              }
                           }
                        }
                     },
                     "example": {
                        "name": "Example_NST",
                        "version": 1.1,
                        "author": "5gTango",
                        "vendor": "5gTango",
                        "description": "This is a description of a NS",
                        "sliceServices": [
                           {
                              "servname": "service_name",
                              "nsdID": "66a1c857-76d7-48db-98a1-6674b531b010",
                              "slaID": "a365dd7e-42c7-4db1-947f-1e2de4e432cc"
                           },
                           {
                              "servname": "service_name",
                              "nsdID": "66a1c857-76d7-48db-98a1-6674b531b010",
                              "slaID": "a365dd7e-42c7-4db1-947f-1e2de4e432cc"
                           }
                        ]
                     }
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Netslice Template structure.",
                  "headers": {
                     "Content-Type": {
                        "description": "The MIME type of the body of the response (\"application/json\").",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 1
                     },
                     "WWW-Authenticate": {
                        "description": "Challenge if the corresponding HTTP request has not provided authorization, or error details if the corresponding HTTP request has provided an invalid authorization token.\n",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 0
                     },
                     "Location": {
                        "description": "The resource URI of the created NSI instance.",
                        "type": "string",
                        "format": "url"
                     }
                  },
                  "schema": {
                     "description": "The generated NST object.",
                     "example": {
                        "created_at": "2018-07-19T12:40:41.419+00:00",
                        "md5": "42510e3a015bd1468b85987763566376",
                        "nstd": {
                           "name": "Example_NST",
                           "version": 1.1,
                           "author": "5gTango NetSlicer",
                           "vendor": "5gTango",
                           "sliceServices": [
                              {
                                 "nsdRef": "6a1c857-76d7-48db-98a1-6674b531b010",
                                 "nsdName": "service_name",
                                 "slaID": "a365dd7e-42c7-4db1-947f-1e2de4e432cc",
                                 "is-shared": false
                              }
                           ],
                           "5qi_value": 1,
                           "notificationTypes": "",
                           "onboardingState": "ENABLED",
                           "operationalState": "ENABLED",
                           "NSI_list_ref": [
                              "6a1c857-76d7-48db-98a1-6674b531b010",
                              "a365dd7e-42c7-4db1-947f-1e2de4e432cc"
                           ],
                           "usageState": "IN_USE"
                        },
                        "signature": null,
                        "status": "active",
                        "updated_at": "2018-07-19T12:43:06.691+00:00",
                        "username": null,
                        "uuid": "66a1c857-76d7-48db-98a1-6674b531b010"
                     }
                  }
               },
               "400": {
                  "description": "If the request is malformed or syntactically incorrect.\n",
                  "headers": {
                     "Content-Type": {
                        "description": "The MIME type of the body of the response (\"application/problem+json\").",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 1
                     },
                     "WWW-Authenticate": {
                        "description": "Challenge if the corresponding HTTP request has not provided authorization, or error details if the corresponding HTTP request has provided an invalid authorization token.\n",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 0
                     }
                  },
                  "schema": {
                     "description": "General \"ProblemDetails\" data structure from IETF RFC 7807 [19].\n",
                     "type": "object",
                     "required": [
                        "status",
                        "detail"
                     ],
                     "properties": {
                        "type": {
                           "description": "Problem type according to IETF RFC 3986 [5]\n",
                           "type": "string",
                           "format": "URI"
                        },
                        "title": {
                           "description": "A short, human-readable summary of the problem type.\n",
                           "type": "string"
                        },
                        "status": {
                           "description": "The HTTP status code for this occurrence of the problem.\n",
                           "type": "integer"
                        },
                        "detail": {
                           "description": "A longer explanation of the specific occurrence of the problem.\n",
                           "type": "string"
                        },
                        "instance": {
                           "description": "A URI reference that identifies the specific occurrence of the problem.\n",
                           "type": "string",
                           "format": "URI"
                        }
                     }
                  }
               },
               "401": {
                  "description": "If the request contains no access token even though one is required, or if the request contains an authorization token that is invalid.\n",
                  "headers": {
                     "Content-Type": {
                        "description": "The MIME type of the body of the response (\"application/problem+json\").",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 1
                     },
                     "WWW-Authenticate": {
                        "description": "Challenge if the corresponding HTTP request has not provided authorization, or error details if the corresponding HTTP request has provided an invalid authorization token.\n",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 0
                     }
                  },
                  "schema": {
                     "description": "General \"ProblemDetails\" data structure from IETF RFC 7807 [19].\n",
                     "type": "object",
                     "required": [
                        "status",
                        "detail"
                     ],
                     "properties": {
                        "type": {
                           "description": "Problem type according to IETF RFC 3986 [5]\n",
                           "type": "string",
                           "format": "URI"
                        },
                        "title": {
                           "description": "A short, human-readable summary of the problem type.\n",
                           "type": "string"
                        },
                        "status": {
                           "description": "The HTTP status code for this occurrence of the problem.\n",
                           "type": "integer"
                        },
                        "detail": {
                           "description": "A longer explanation of the specific occurrence of the problem.\n",
                           "type": "string"
                        },
                        "instance": {
                           "description": "A URI reference that identifies the specific occurrence of the problem.\n",
                           "type": "string",
                           "format": "URI"
                        }
                     }
                  }
               },
               "403": {
                  "description": "If the API consumer is not allowed to perform a particular request to a particular resource, the API producer shall respond with this response code.\n",
                  "headers": {
                     "Content-Type": {
                        "description": "The MIME type of the body of the response (\"application/problem+json\").",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 1
                     },
                     "WWW-Authenticate": {
                        "description": "Challenge if the corresponding HTTP request has not provided authorization, or error details if the corresponding HTTP request has provided an invalid authorization token.\n",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 0
                     }
                  },
                  "schema": {
                     "description": "General \"ProblemDetails\" data structure from IETF RFC 7807 [19].\n",
                     "type": "object",
                     "required": [
                        "status",
                        "detail"
                     ],
                     "properties": {
                        "type": {
                           "description": "Problem type according to IETF RFC 3986 [5]\n",
                           "type": "string",
                           "format": "URI"
                        },
                        "title": {
                           "description": "A short, human-readable summary of the problem type.\n",
                           "type": "string"
                        },
                        "status": {
                           "description": "The HTTP status code for this occurrence of the problem.\n",
                           "type": "integer"
                        },
                        "detail": {
                           "description": "A longer explanation of the specific occurrence of the problem.\n",
                           "type": "string"
                        },
                        "instance": {
                           "description": "A URI reference that identifies the specific occurrence of the problem.\n",
                           "type": "string",
                           "format": "URI"
                        }
                     }
                  }
               },
               "404": {
                  "description": "If the API producer did not find a current representation for the resource addressed by the URI passed in the request, or is not willing to disclose that one exists.\n",
                  "headers": {
                     "Content-Type": {
                        "description": "The MIME type of the body of the response (\"application/problem+json\").",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 1
                     },
                     "WWW-Authenticate": {
                        "description": "Challenge if the corresponding HTTP request has not provided authorization, or error details if the corresponding HTTP request has provided an invalid authorization token.\n",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 0
                     }
                  },
                  "schema": {
                     "description": "General \"ProblemDetails\" data structure from IETF RFC 7807 [19].\n",
                     "type": "object",
                     "required": [
                        "status",
                        "detail"
                     ],
                     "properties": {
                        "type": {
                           "description": "Problem type according to IETF RFC 3986 [5]\n",
                           "type": "string",
                           "format": "URI"
                        },
                        "title": {
                           "description": "A short, human-readable summary of the problem type.\n",
                           "type": "string"
                        },
                        "status": {
                           "description": "The HTTP status code for this occurrence of the problem.\n",
                           "type": "integer"
                        },
                        "detail": {
                           "description": "A longer explanation of the specific occurrence of the problem.\n",
                           "type": "string"
                        },
                        "instance": {
                           "description": "A URI reference that identifies the specific occurrence of the problem.\n",
                           "type": "string",
                           "format": "URI"
                        }
                     }
                  }
               },
               "405": {
                  "description": "If the API producer did not find a current representation for the resource addressed by the URI passed in the request, or is not willing to disclose that one exists.\n",
                  "headers": {
                     "Content-Type": {
                        "description": "The MIME type of the body of the response (\"application/problem+json\").",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 1
                     },
                     "WWW-Authenticate": {
                        "description": "Challenge if the corresponding HTTP request has not provided authorization, or error details if the corresponding HTTP request has provided an invalid authorization token.\n",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 0
                     }
                  },
                  "schema": {
                     "description": "General \"ProblemDetails\" data structure from IETF RFC 7807 [19].\n",
                     "type": "object",
                     "required": [
                        "status",
                        "detail"
                     ],
                     "properties": {
                        "type": {
                           "description": "Problem type according to IETF RFC 3986 [5]\n",
                           "type": "string",
                           "format": "URI"
                        },
                        "title": {
                           "description": "A short, human-readable summary of the problem type.\n",
                           "type": "string"
                        },
                        "status": {
                           "description": "The HTTP status code for this occurrence of the problem.\n",
                           "type": "integer"
                        },
                        "detail": {
                           "description": "A longer explanation of the specific occurrence of the problem.\n",
                           "type": "string"
                        },
                        "instance": {
                           "description": "A URI reference that identifies the specific occurrence of the problem.\n",
                           "type": "string",
                           "format": "URI"
                        }
                     }
                  }
               },
               "406": {
                  "description": "If the \"Accept\" HTTP header does not contain at least one name of a content type that is acceptable to the API producer.\n",
                  "headers": {
                     "Content-Type": {
                        "description": "The MIME type of the body of the response (\"application/problem+json\").",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 1
                     },
                     "WWW-Authenticate": {
                        "description": "Challenge if the corresponding HTTP request has not provided authorization, or error details if the corresponding HTTP request has provided an invalid authorization token.\n",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 0
                     }
                  },
                  "schema": {
                     "description": "General \"ProblemDetails\" data structure from IETF RFC 7807 [19].\n",
                     "type": "object",
                     "required": [
                        "status",
                        "detail"
                     ],
                     "properties": {
                        "type": {
                           "description": "Problem type according to IETF RFC 3986 [5]\n",
                           "type": "string",
                           "format": "URI"
                        },
                        "title": {
                           "description": "A short, human-readable summary of the problem type.\n",
                           "type": "string"
                        },
                        "status": {
                           "description": "The HTTP status code for this occurrence of the problem.\n",
                           "type": "integer"
                        },
                        "detail": {
                           "description": "A longer explanation of the specific occurrence of the problem.\n",
                           "type": "string"
                        },
                        "instance": {
                           "description": "A URI reference that identifies the specific occurrence of the problem.\n",
                           "type": "string",
                           "format": "URI"
                        }
                     }
                  }
               },
               "409": {
                  "description": "Another request is in progress that prohibits the fulfillment of the current request, or the current resource state is inconsistent with the request.\n",
                  "headers": {
                     "Content-Type": {
                        "description": "The MIME type of the body of the response (\"application/problem+json\").",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 1
                     },
                     "WWW-Authenticate": {
                        "description": "Challenge if the corresponding HTTP request has not provided authorization, or error details if the corresponding HTTP request has provided an invalid authorization token.\n",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 0
                     }
                  },
                  "schema": {
                     "description": "General \"ProblemDetails\" data structure from IETF RFC 7807 [19].\n",
                     "type": "object",
                     "required": [
                        "status",
                        "detail"
                     ],
                     "properties": {
                        "type": {
                           "description": "Problem type according to IETF RFC 3986 [5]\n",
                           "type": "string",
                           "format": "URI"
                        },
                        "title": {
                           "description": "A short, human-readable summary of the problem type.\n",
                           "type": "string"
                        },
                        "status": {
                           "description": "The HTTP status code for this occurrence of the problem.\n",
                           "type": "integer"
                        },
                        "detail": {
                           "description": "A longer explanation of the specific occurrence of the problem.\n",
                           "type": "string"
                        },
                        "instance": {
                           "description": "A URI reference that identifies the specific occurrence of the problem.\n",
                           "type": "string",
                           "format": "URI"
                        }
                     }
                  }
               },
               "412": {
                  "description": "This code is used in conjunction with conditional requests (typically used to protect resources consistency when using PUT or PATCH in a multi-client scenario) to indicate that a precondition has failed.\n",
                  "headers": {
                     "Content-Type": {
                        "description": "The MIME type of the body of the response (\"application/problem+json\").",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 1
                     },
                     "WWW-Authenticate": {
                        "description": "Challenge if the corresponding HTTP request has not provided authorization, or error details if the corresponding HTTP request has provided an invalid authorization token.\n",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 0
                     }
                  },
                  "schema": {
                     "description": "General \"ProblemDetails\" data structure from IETF RFC 7807 [19].\n",
                     "type": "object",
                     "required": [
                        "status",
                        "detail"
                     ],
                     "properties": {
                        "type": {
                           "description": "Problem type according to IETF RFC 3986 [5]\n",
                           "type": "string",
                           "format": "URI"
                        },
                        "title": {
                           "description": "A short, human-readable summary of the problem type.\n",
                           "type": "string"
                        },
                        "status": {
                           "description": "The HTTP status code for this occurrence of the problem.\n",
                           "type": "integer"
                        },
                        "detail": {
                           "description": "A longer explanation of the specific occurrence of the problem.\n",
                           "type": "string"
                        },
                        "instance": {
                           "description": "A URI reference that identifies the specific occurrence of the problem.\n",
                           "type": "string",
                           "format": "URI"
                        }
                     }
                  }
               },
               "416": {
                  "description": "This code is returned if the requested byte range in the Range HTTP header is not present in the requested resource.\n",
                  "headers": {
                     "Content-Type": {
                        "description": "The MIME type of the body of the response (\"application/problem+json\").",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 1
                     },
                     "WWW-Authenticate": {
                        "description": "Challenge if the corresponding HTTP request has not provided authorization, or error details if the corresponding HTTP request has provided an invalid authorization token.\n",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 0
                     }
                  },
                  "schema": {
                     "description": "General \"ProblemDetails\" data structure from IETF RFC 7807 [19].\n",
                     "type": "object",
                     "required": [
                        "status",
                        "detail"
                     ],
                     "properties": {
                        "type": {
                           "description": "Problem type according to IETF RFC 3986 [5]\n",
                           "type": "string",
                           "format": "URI"
                        },
                        "title": {
                           "description": "A short, human-readable summary of the problem type.\n",
                           "type": "string"
                        },
                        "status": {
                           "description": "The HTTP status code for this occurrence of the problem.\n",
                           "type": "integer"
                        },
                        "detail": {
                           "description": "A longer explanation of the specific occurrence of the problem.\n",
                           "type": "string"
                        },
                        "instance": {
                           "description": "A URI reference that identifies the specific occurrence of the problem.\n",
                           "type": "string",
                           "format": "URI"
                        }
                     }
                  }
               },
               "422": {
                  "description": "If the payload body of a request contains syntactically correct data (e.g. well-formed JSON) but the data cannot be processed (e.g. because it fails validation against a schema).\n",
                  "headers": {
                     "Content-Type": {
                        "description": "The MIME type of the body of the response.",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 1
                     },
                     "WWW-Authenticate": {
                        "description": "Challenge if the corresponding HTTP request has not provided authorization, or error details if the corresponding HTTP request has provided an invalid authorization token.\n",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 0
                     }
                  },
                  "schema": {
                     "description": "The definition of the general \"ProblemDetails\" data structure from IETF RFC 7807 [19] is reproduced inthis structure. Compared to the general framework defined in IETF RFC 7807 [19], the \"status\" and \"detail\" attributes are mandated to be included by the present document, to ensure that the response contains additional textual information about an error. IETF RFC 7807 [19] foresees extensibility of the \"ProblemDetails\" type. It is possible that particular APIs in the present document, or particular implementations, define extensions to define additional attributes that provide more information about the error. The description column only provides some explanation of the meaning to Facilitate understanding of the design. For a full description, see IETF RFC 7807 [19].\n",
                     "type": "object",
                     "required": [
                        "status",
                        "detail"
                     ],
                     "properties": {
                        "type": {
                           "description": "A URI reference according to IETF RFC 3986 [5] that identifies the problem type. It is encouraged that the URI provides human-readable documentation for the problem (e.g. using HTML) when dereferenced. When this member is not present, its value is assumed to be \"about:blank\".\n",
                           "type": "string",
                           "format": "URI"
                        },
                        "title": {
                           "description": "A short, human-readable summary of the problem type. It should not change from occurrence to occurrence of the problem, except for purposes of localization. If type is given and other than \"about:blank\", this attribute shall also be provided. A short, human-readable summary of the problem type.  It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization (e.g., using proactive content negotiation; see [RFC7231], Section 3.4).\n",
                           "type": "string"
                        },
                        "status": {
                           "description": "The HTTP status code for this occurrence of the problem. The HTTP status code ([RFC7231], Section 6) generated by the origin server for this occurrence of the problem.\n",
                           "type": "integer"
                        },
                        "detail": {
                           "description": "A human-readable explanation specific to this occurrence of the problem.\n",
                           "type": "string"
                        },
                        "instance": {
                           "description": "A URI reference that identifies the specific occurrence of the problem. It may yield further information if dereferenced.\n",
                           "type": "string",
                           "format": "URI"
                        }
                     }
                  }
               },
               "500": {
                  "description": "If there is an application error not related to the client's input that cannot be easily mapped to any other HTTP response code (\"catch all error\").\n",
                  "headers": {
                     "Content-Type": {
                        "description": "The MIME type of the body of the response (\"application/problem+json\").",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 1
                     },
                     "WWW-Authenticate": {
                        "description": "Challenge if the corresponding HTTP request has not provided authorization, or error details if the corresponding HTTP request has provided an invalid authorization token.\n",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 0
                     }
                  },
                  "schema": {
                     "description": "General \"ProblemDetails\" data structure from IETF RFC 7807 [19].\n",
                     "type": "object",
                     "required": [
                        "status",
                        "detail"
                     ],
                     "properties": {
                        "type": {
                           "description": "Problem type according to IETF RFC 3986 [5]\n",
                           "type": "string",
                           "format": "URI"
                        },
                        "title": {
                           "description": "A short, human-readable summary of the problem type.\n",
                           "type": "string"
                        },
                        "status": {
                           "description": "The HTTP status code for this occurrence of the problem.\n",
                           "type": "integer"
                        },
                        "detail": {
                           "description": "A longer explanation of the specific occurrence of the problem.\n",
                           "type": "string"
                        },
                        "instance": {
                           "description": "A URI reference that identifies the specific occurrence of the problem.\n",
                           "type": "string",
                           "format": "URI"
                        }
                     }
                  }
               },
               "503": {
                  "description": "If the API producer encounters an internal overload situation of itself or of a system it relies on.\n",
                  "headers": {
                     "Content-Type": {
                        "description": "The MIME type of the body of the response (\"application/problem+json\").",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 1
                     },
                     "WWW-Authenticate": {
                        "description": "Challenge if the corresponding HTTP request has not provided authorization, or error details if the corresponding HTTP request has provided an invalid authorization token.\n",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 0
                     }
                  },
                  "schema": {
                     "description": "General \"ProblemDetails\" data structure from IETF RFC 7807 [19].\n",
                     "type": "object",
                     "required": [
                        "status",
                        "detail"
                     ],
                     "properties": {
                        "type": {
                           "description": "Problem type according to IETF RFC 3986 [5]\n",
                           "type": "string",
                           "format": "URI"
                        },
                        "title": {
                           "description": "A short, human-readable summary of the problem type.\n",
                           "type": "string"
                        },
                        "status": {
                           "description": "The HTTP status code for this occurrence of the problem.\n",
                           "type": "integer"
                        },
                        "detail": {
                           "description": "A longer explanation of the specific occurrence of the problem.\n",
                           "type": "string"
                        },
                        "instance": {
                           "description": "A URI reference that identifies the specific occurrence of the problem.\n",
                           "type": "string",
                           "format": "URI"
                        }
                     }
                  }
               }
            },
            "tags": ["slices"]
         },
         "get": {
            "description": "**Query NST**: Queries NST information (multiple NSTs).\n",
            "responses": {
               "200": {
                  "description": "Results of the query (NSTs).\n",
                  "headers": {
                     "Content-Type": {
                        "description": "The MIME type of the body of the response (\"application/json\").",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 1
                     },
                     "WWW-Authenticate": {
                        "description": "Challenge if the corresponding HTTP request has not provided authorization, or error details if the corresponding HTTP request has provided an invalid authorization token.",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 0
                     }
                  },
                  "schema": {
                     "type": "array",
                     "items": {
                        "description": "Results of the query (NST).",
                        "type": "object",
                        "properties": {
                           "uuid": {
                              "description": "A unique identifier of the NST allocated by the Slice Manager.\n",
                              "type": "string"
                           },
                           "created_at": {
                              "description": "Describe the datetime when it was created.\n",
                              "type": "string"
                           },
                           "updated_at": {
                              "description": "Describe the datetime when it was updated.\n",
                              "type": "string"
                           },
                           "name": {
                              "description": "NST Name.",
                              "type": "string"
                           },
                           "version": {
                              "description": "NST Version.",
                              "type": "string"
                           },
                           "author": {
                              "description": "NST author.",
                              "type": "string"
                           },
                           "vendor": {
                              "description": "NST vendor.",
                              "type": "string"
                           },
                           "nstNsdIds": {
                              "description": "List of underlying NSDs that comprise the NST.",
                              "type": "string"
                           },
                           "onboardingState": {
                              "description": "Operational state (ENABLE, DISABLED).",
                              "type": "string",
                              "enum": [
                                 "ENABLED",
                                 "DISABLED"
                              ]
                           },
                           "operationalState": {
                              "description": "Operational state (ENABLE, DISABLED).",
                              "type": "string",
                              "enum": [
                                 "ENABLED",
                                 "DISABLED"
                              ]
                           },
                           "usageState": {
                              "description": "Usage state (IN_USE, NOT_IN_USE).",
                              "type": "string",
                              "enum": [
                                 "IN_USE",
                                 "NOT_IN_USE"
                              ]
                           },
                           "notificationTypes": {
                              "description": "Permited values: NstOnboardingNotification, NStTChangeNotification and NstDeletionNotification.\n",
                              "type": "string",
                              "enum": [
                                 "NstOnboardingNotification",
                                 "NstChangeNotification",
                                 "NstDeletionNotification"
                              ]
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "If the request is malformed or syntactically incorrect.\n",
                  "headers": {
                     "Content-Type": {
                        "description": "The MIME type of the body of the response (\"application/problem+json\").",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 1
                     },
                     "WWW-Authenticate": {
                        "description": "Challenge if the corresponding HTTP request has not provided authorization, or error details if the corresponding HTTP request has provided an invalid authorization token.\n",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 0
                     }
                  },
                  "schema": {
                     "description": "General \"ProblemDetails\" data structure from IETF RFC 7807 [19].\n",
                     "type": "object",
                     "required": [
                        "status",
                        "detail"
                     ],
                     "properties": {
                        "type": {
                           "description": "Problem type according to IETF RFC 3986 [5]\n",
                           "type": "string",
                           "format": "URI"
                        },
                        "title": {
                           "description": "A short, human-readable summary of the problem type.\n",
                           "type": "string"
                        },
                        "status": {
                           "description": "The HTTP status code for this occurrence of the problem.\n",
                           "type": "integer"
                        },
                        "detail": {
                           "description": "A longer explanation of the specific occurrence of the problem.\n",
                           "type": "string"
                        },
                        "instance": {
                           "description": "A URI reference that identifies the specific occurrence of the problem.\n",
                           "type": "string",
                           "format": "URI"
                        }
                     }
                  }
               },
               "401": {
                  "description": "If the request contains no access token even though one is required, or if the request contains an authorization token that is invalid.\n",
                  "headers": {
                     "Content-Type": {
                        "description": "The MIME type of the body of the response (\"application/problem+json\").",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 1
                     },
                     "WWW-Authenticate": {
                        "description": "Challenge if the corresponding HTTP request has not provided authorization, or error details if the corresponding HTTP request has provided an invalid authorization token.\n",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 0
                     }
                  },
                  "schema": {
                     "description": "General \"ProblemDetails\" data structure from IETF RFC 7807 [19].\n",
                     "type": "object",
                     "required": [
                        "status",
                        "detail"
                     ],
                     "properties": {
                        "type": {
                           "description": "Problem type according to IETF RFC 3986 [5]\n",
                           "type": "string",
                           "format": "URI"
                        },
                        "title": {
                           "description": "A short, human-readable summary of the problem type.\n",
                           "type": "string"
                        },
                        "status": {
                           "description": "The HTTP status code for this occurrence of the problem.\n",
                           "type": "integer"
                        },
                        "detail": {
                           "description": "A longer explanation of the specific occurrence of the problem.\n",
                           "type": "string"
                        },
                        "instance": {
                           "description": "A URI reference that identifies the specific occurrence of the problem.\n",
                           "type": "string",
                           "format": "URI"
                        }
                     }
                  }
               },
               "403": {
                  "description": "If the API consumer is not allowed to perform a particular request to a particular resource, the API producer shall respond with this response code.\n",
                  "headers": {
                     "Content-Type": {
                        "description": "The MIME type of the body of the response (\"application/problem+json\").",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 1
                     },
                     "WWW-Authenticate": {
                        "description": "Challenge if the corresponding HTTP request has not provided authorization, or error details if the corresponding HTTP request has provided an invalid authorization token.\n",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 0
                     }
                  },
                  "schema": {
                     "description": "General \"ProblemDetails\" data structure from IETF RFC 7807 [19].\n",
                     "type": "object",
                     "required": [
                        "status",
                        "detail"
                     ],
                     "properties": {
                        "type": {
                           "description": "Problem type according to IETF RFC 3986 [5]\n",
                           "type": "string",
                           "format": "URI"
                        },
                        "title": {
                           "description": "A short, human-readable summary of the problem type.\n",
                           "type": "string"
                        },
                        "status": {
                           "description": "The HTTP status code for this occurrence of the problem.\n",
                           "type": "integer"
                        },
                        "detail": {
                           "description": "A longer explanation of the specific occurrence of the problem.\n",
                           "type": "string"
                        },
                        "instance": {
                           "description": "A URI reference that identifies the specific occurrence of the problem.\n",
                           "type": "string",
                           "format": "URI"
                        }
                     }
                  }
               },
               "404": {
                  "description": "If the API producer did not find a current representation for the resource addressed by the URI passed in the request, or is not willing to disclose that one exists.\n",
                  "headers": {
                     "Content-Type": {
                        "description": "The MIME type of the body of the response (\"application/problem+json\").",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 1
                     },
                     "WWW-Authenticate": {
                        "description": "Challenge if the corresponding HTTP request has not provided authorization, or error details if the corresponding HTTP request has provided an invalid authorization token.\n",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 0
                     }
                  },
                  "schema": {
                     "description": "General \"ProblemDetails\" data structure from IETF RFC 7807 [19].\n",
                     "type": "object",
                     "required": [
                        "status",
                        "detail"
                     ],
                     "properties": {
                        "type": {
                           "description": "Problem type according to IETF RFC 3986 [5]\n",
                           "type": "string",
                           "format": "URI"
                        },
                        "title": {
                           "description": "A short, human-readable summary of the problem type.\n",
                           "type": "string"
                        },
                        "status": {
                           "description": "The HTTP status code for this occurrence of the problem.\n",
                           "type": "integer"
                        },
                        "detail": {
                           "description": "A longer explanation of the specific occurrence of the problem.\n",
                           "type": "string"
                        },
                        "instance": {
                           "description": "A URI reference that identifies the specific occurrence of the problem.\n",
                           "type": "string",
                           "format": "URI"
                        }
                     }
                  }
               },
               "405": {
                  "description": "If the API producer did not find a current representation for the resource addressed by the URI passed in the request, or is not willing to disclose that one exists.\n",
                  "headers": {
                     "Content-Type": {
                        "description": "The MIME type of the body of the response (\"application/problem+json\").",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 1
                     },
                     "WWW-Authenticate": {
                        "description": "Challenge if the corresponding HTTP request has not provided authorization, or error details if the corresponding HTTP request has provided an invalid authorization token.\n",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 0
                     }
                  },
                  "schema": {
                     "description": "General \"ProblemDetails\" data structure from IETF RFC 7807 [19].\n",
                     "type": "object",
                     "required": [
                        "status",
                        "detail"
                     ],
                     "properties": {
                        "type": {
                           "description": "Problem type according to IETF RFC 3986 [5]\n",
                           "type": "string",
                           "format": "URI"
                        },
                        "title": {
                           "description": "A short, human-readable summary of the problem type.\n",
                           "type": "string"
                        },
                        "status": {
                           "description": "The HTTP status code for this occurrence of the problem.\n",
                           "type": "integer"
                        },
                        "detail": {
                           "description": "A longer explanation of the specific occurrence of the problem.\n",
                           "type": "string"
                        },
                        "instance": {
                           "description": "A URI reference that identifies the specific occurrence of the problem.\n",
                           "type": "string",
                           "format": "URI"
                        }
                     }
                  }
               },
               "406": {
                  "description": "If the \"Accept\" HTTP header does not contain at least one name of a content type that is acceptable to the API producer.\n",
                  "headers": {
                     "Content-Type": {
                        "description": "The MIME type of the body of the response (\"application/problem+json\").",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 1
                     },
                     "WWW-Authenticate": {
                        "description": "Challenge if the corresponding HTTP request has not provided authorization, or error details if the corresponding HTTP request has provided an invalid authorization token.\n",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 0
                     }
                  },
                  "schema": {
                     "description": "General \"ProblemDetails\" data structure from IETF RFC 7807 [19].\n",
                     "type": "object",
                     "required": [
                        "status",
                        "detail"
                     ],
                     "properties": {
                        "type": {
                           "description": "Problem type according to IETF RFC 3986 [5]\n",
                           "type": "string",
                           "format": "URI"
                        },
                        "title": {
                           "description": "A short, human-readable summary of the problem type.\n",
                           "type": "string"
                        },
                        "status": {
                           "description": "The HTTP status code for this occurrence of the problem.\n",
                           "type": "integer"
                        },
                        "detail": {
                           "description": "A longer explanation of the specific occurrence of the problem.\n",
                           "type": "string"
                        },
                        "instance": {
                           "description": "A URI reference that identifies the specific occurrence of the problem.\n",
                           "type": "string",
                           "format": "URI"
                        }
                     }
                  }
               },
               "409": {
                  "description": "Another request is in progress that prohibits the fulfillment of the current request, or the current resource state is inconsistent with the request.\n",
                  "headers": {
                     "Content-Type": {
                        "description": "The MIME type of the body of the response (\"application/problem+json\").",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 1
                     },
                     "WWW-Authenticate": {
                        "description": "Challenge if the corresponding HTTP request has not provided authorization, or error details if the corresponding HTTP request has provided an invalid authorization token.\n",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 0
                     }
                  },
                  "schema": {
                     "description": "General \"ProblemDetails\" data structure from IETF RFC 7807 [19].\n",
                     "type": "object",
                     "required": [
                        "status",
                        "detail"
                     ],
                     "properties": {
                        "type": {
                           "description": "Problem type according to IETF RFC 3986 [5]\n",
                           "type": "string",
                           "format": "URI"
                        },
                        "title": {
                           "description": "A short, human-readable summary of the problem type.\n",
                           "type": "string"
                        },
                        "status": {
                           "description": "The HTTP status code for this occurrence of the problem.\n",
                           "type": "integer"
                        },
                        "detail": {
                           "description": "A longer explanation of the specific occurrence of the problem.\n",
                           "type": "string"
                        },
                        "instance": {
                           "description": "A URI reference that identifies the specific occurrence of the problem.\n",
                           "type": "string",
                           "format": "URI"
                        }
                     }
                  }
               },
               "412": {
                  "description": "This code is used in conjunction with conditional requests (typically used to protect resources consistency when using PUT or PATCH in a multi-client scenario) to indicate that a precondition has failed.\n",
                  "headers": {
                     "Content-Type": {
                        "description": "The MIME type of the body of the response (\"application/problem+json\").",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 1
                     },
                     "WWW-Authenticate": {
                        "description": "Challenge if the corresponding HTTP request has not provided authorization, or error details if the corresponding HTTP request has provided an invalid authorization token.\n",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 0
                     }
                  },
                  "schema": {
                     "description": "General \"ProblemDetails\" data structure from IETF RFC 7807 [19].\n",
                     "type": "object",
                     "required": [
                        "status",
                        "detail"
                     ],
                     "properties": {
                        "type": {
                           "description": "Problem type according to IETF RFC 3986 [5]\n",
                           "type": "string",
                           "format": "URI"
                        },
                        "title": {
                           "description": "A short, human-readable summary of the problem type.\n",
                           "type": "string"
                        },
                        "status": {
                           "description": "The HTTP status code for this occurrence of the problem.\n",
                           "type": "integer"
                        },
                        "detail": {
                           "description": "A longer explanation of the specific occurrence of the problem.\n",
                           "type": "string"
                        },
                        "instance": {
                           "description": "A URI reference that identifies the specific occurrence of the problem.\n",
                           "type": "string",
                           "format": "URI"
                        }
                     }
                  }
               },
               "416": {
                  "description": "This code is returned if the requested byte range in the Range HTTP header is not present in the requested resource.\n",
                  "headers": {
                     "Content-Type": {
                        "description": "The MIME type of the body of the response (\"application/problem+json\").",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 1
                     },
                     "WWW-Authenticate": {
                        "description": "Challenge if the corresponding HTTP request has not provided authorization, or error details if the corresponding HTTP request has provided an invalid authorization token.\n",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 0
                     }
                  },
                  "schema": {
                     "description": "General \"ProblemDetails\" data structure from IETF RFC 7807 [19].\n",
                     "type": "object",
                     "required": [
                        "status",
                        "detail"
                     ],
                     "properties": {
                        "type": {
                           "description": "Problem type according to IETF RFC 3986 [5]\n",
                           "type": "string",
                           "format": "URI"
                        },
                        "title": {
                           "description": "A short, human-readable summary of the problem type.\n",
                           "type": "string"
                        },
                        "status": {
                           "description": "The HTTP status code for this occurrence of the problem.\n",
                           "type": "integer"
                        },
                        "detail": {
                           "description": "A longer explanation of the specific occurrence of the problem.\n",
                           "type": "string"
                        },
                        "instance": {
                           "description": "A URI reference that identifies the specific occurrence of the problem.\n",
                           "type": "string",
                           "format": "URI"
                        }
                     }
                  }
               },
               "422": {
                  "description": "If the payload body of a request contains syntactically correct data (e.g. well-formed JSON) but the data cannot be processed (e.g. because it fails validation against a schema).\n",
                  "headers": {
                     "Content-Type": {
                        "description": "The MIME type of the body of the response.",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 1
                     },
                     "WWW-Authenticate": {
                        "description": "Challenge if the corresponding HTTP request has not provided authorization, or error details if the corresponding HTTP request has provided an invalid authorization token.\n",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 0
                     }
                  },
                  "schema": {
                     "description": "The definition of the general \"ProblemDetails\" data structure from IETF RFC 7807 [19] is reproduced inthis structure. Compared to the general framework defined in IETF RFC 7807 [19], the \"status\" and \"detail\" attributes are mandated to be included by the present document, to ensure that the response contains additional textual information about an error. IETF RFC 7807 [19] foresees extensibility of the \"ProblemDetails\" type. It is possible that particular APIs in the present document, or particular implementations, define extensions to define additional attributes that provide more information about the error. The description column only provides some explanation of the meaning to Facilitate understanding of the design. For a full description, see IETF RFC 7807 [19].\n",
                     "type": "object",
                     "required": [
                        "status",
                        "detail"
                     ],
                     "properties": {
                        "type": {
                           "description": "A URI reference according to IETF RFC 3986 [5] that identifies the problem type. It is encouraged that the URI provides human-readable documentation for the problem (e.g. using HTML) when dereferenced. When this member is not present, its value is assumed to be \"about:blank\".\n",
                           "type": "string",
                           "format": "URI"
                        },
                        "title": {
                           "description": "A short, human-readable summary of the problem type. It should not change from occurrence to occurrence of the problem, except for purposes of localization. If type is given and other than \"about:blank\", this attribute shall also be provided. A short, human-readable summary of the problem type.  It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization (e.g., using proactive content negotiation; see [RFC7231], Section 3.4).\n",
                           "type": "string"
                        },
                        "status": {
                           "description": "The HTTP status code for this occurrence of the problem. The HTTP status code ([RFC7231], Section 6) generated by the origin server for this occurrence of the problem.\n",
                           "type": "integer"
                        },
                        "detail": {
                           "description": "A human-readable explanation specific to this occurrence of the problem.\n",
                           "type": "string"
                        },
                        "instance": {
                           "description": "A URI reference that identifies the specific occurrence of the problem. It may yield further information if dereferenced.\n",
                           "type": "string",
                           "format": "URI"
                        }
                     }
                  }
               },
               "500": {
                  "description": "If there is an application error not related to the client's input that cannot be easily mapped to any other HTTP response code (\"catch all error\").\n",
                  "headers": {
                     "Content-Type": {
                        "description": "The MIME type of the body of the response (\"application/problem+json\").",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 1
                     },
                     "WWW-Authenticate": {
                        "description": "Challenge if the corresponding HTTP request has not provided authorization, or error details if the corresponding HTTP request has provided an invalid authorization token.\n",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 0
                     }
                  },
                  "schema": {
                     "description": "General \"ProblemDetails\" data structure from IETF RFC 7807 [19].\n",
                     "type": "object",
                     "required": [
                        "status",
                        "detail"
                     ],
                     "properties": {
                        "type": {
                           "description": "Problem type according to IETF RFC 3986 [5]\n",
                           "type": "string",
                           "format": "URI"
                        },
                        "title": {
                           "description": "A short, human-readable summary of the problem type.\n",
                           "type": "string"
                        },
                        "status": {
                           "description": "The HTTP status code for this occurrence of the problem.\n",
                           "type": "integer"
                        },
                        "detail": {
                           "description": "A longer explanation of the specific occurrence of the problem.\n",
                           "type": "string"
                        },
                        "instance": {
                           "description": "A URI reference that identifies the specific occurrence of the problem.\n",
                           "type": "string",
                           "format": "URI"
                        }
                     }
                  }
               },
               "503": {
                  "description": "If the API producer encounters an internal overload situation of itself or of a system it relies on.\n",
                  "headers": {
                     "Content-Type": {
                        "description": "The MIME type of the body of the response (\"application/problem+json\").",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 1
                     },
                     "WWW-Authenticate": {
                        "description": "Challenge if the corresponding HTTP request has not provided authorization, or error details if the corresponding HTTP request has provided an invalid authorization token.\n",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 0
                     }
                  },
                  "schema": {
                     "description": "General \"ProblemDetails\" data structure from IETF RFC 7807 [19].\n",
                     "type": "object",
                     "required": [
                        "status",
                        "detail"
                     ],
                     "properties": {
                        "type": {
                           "description": "Problem type according to IETF RFC 3986 [5]\n",
                           "type": "string",
                           "format": "URI"
                        },
                        "title": {
                           "description": "A short, human-readable summary of the problem type.\n",
                           "type": "string"
                        },
                        "status": {
                           "description": "The HTTP status code for this occurrence of the problem.\n",
                           "type": "integer"
                        },
                        "detail": {
                           "description": "A longer explanation of the specific occurrence of the problem.\n",
                           "type": "string"
                        },
                        "instance": {
                           "description": "A URI reference that identifies the specific occurrence of the problem.\n",
                           "type": "string",
                           "format": "URI"
                        }
                     }
                  }
               }
            },
            "tags": ["slices"]
         }
      },
      "/slices/descriptors/{nstId}": {
         "parameters": [
            {
               "name": "nstId",
               "description": "Uuid of the on-boarded NST.\n",
               "in": "path",
               "type": "string",
               "required": true
            }
         ],
         "get": {
            "description": "**Query NST**: Get a particular NST information.\n",
            "responses": {
               "200": {
                  "description": "NST Information.\n",
                  "headers": {
                     "Content-Type": {
                        "description": "The MIME type of the body of the response (\"application/json\").",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 1
                     },
                     "WWW-Authenticate": {
                        "description": "Challenge if the corresponding HTTP request has not provided authorization, or error details if the corresponding HTTP request has provided an invalid authorization token.\n",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 0
                     }
                  },
                  "schema": {
                     "description": "The generated NST object.",
                     "example": {
                        "created_at": "2018-07-19T12:40:41.419+00:00",
                        "md5": "42510e3a015bd1468b85987763566376",
                        "nstd": {
                           "name": "Example_NST",
                           "version": 1.1,
                           "author": "5gTango NetSlicer",
                           "vendor": "5gTango",
                           "sliceServices": [
                              {
                                 "nsdRef": "6a1c857-76d7-48db-98a1-6674b531b010",
                                 "nsdName": "service_name",
                                 "slaID": "a365dd7e-42c7-4db1-947f-1e2de4e432cc",
                                 "is-shared": false
                              }
                           ],
                           "5qi_value": 1,
                           "notificationTypes": "",
                           "onboardingState": "ENABLED",
                           "operationalState": "ENABLED",
                           "NSI_list_ref": [
                              "6a1c857-76d7-48db-98a1-6674b531b010",
                              "a365dd7e-42c7-4db1-947f-1e2de4e432cc"
                           ],
                           "usageState": "IN_USE"
                        },
                        "signature": null,
                        "status": "active",
                        "updated_at": "2018-07-19T12:43:06.691+00:00",
                        "username": null,
                        "uuid": "66a1c857-76d7-48db-98a1-6674b531b010"
                     }
                  }
               },
               "400": {
                  "description": "If the request is malformed or syntactically incorrect.\n",
                  "headers": {
                     "Content-Type": {
                        "description": "The MIME type of the body of the response (\"application/problem+json\").",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 1
                     },
                     "WWW-Authenticate": {
                        "description": "Challenge if the corresponding HTTP request has not provided authorization, or error details if the corresponding HTTP request has provided an invalid authorization token.\n",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 0
                     }
                  },
                  "schema": {
                     "description": "General \"ProblemDetails\" data structure from IETF RFC 7807 [19].\n",
                     "type": "object",
                     "required": [
                        "status",
                        "detail"
                     ],
                     "properties": {
                        "type": {
                           "description": "Problem type according to IETF RFC 3986 [5]\n",
                           "type": "string",
                           "format": "URI"
                        },
                        "title": {
                           "description": "A short, human-readable summary of the problem type.\n",
                           "type": "string"
                        },
                        "status": {
                           "description": "The HTTP status code for this occurrence of the problem.\n",
                           "type": "integer"
                        },
                        "detail": {
                           "description": "A longer explanation of the specific occurrence of the problem.\n",
                           "type": "string"
                        },
                        "instance": {
                           "description": "A URI reference that identifies the specific occurrence of the problem.\n",
                           "type": "string",
                           "format": "URI"
                        }
                     }
                  }
               },
               "401": {
                  "description": "If the request contains no access token even though one is required, or if the request contains an authorization token that is invalid.\n",
                  "headers": {
                     "Content-Type": {
                        "description": "The MIME type of the body of the response (\"application/problem+json\").",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 1
                     },
                     "WWW-Authenticate": {
                        "description": "Challenge if the corresponding HTTP request has not provided authorization, or error details if the corresponding HTTP request has provided an invalid authorization token.\n",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 0
                     }
                  },
                  "schema": {
                     "description": "General \"ProblemDetails\" data structure from IETF RFC 7807 [19].\n",
                     "type": "object",
                     "required": [
                        "status",
                        "detail"
                     ],
                     "properties": {
                        "type": {
                           "description": "Problem type according to IETF RFC 3986 [5]\n",
                           "type": "string",
                           "format": "URI"
                        },
                        "title": {
                           "description": "A short, human-readable summary of the problem type.\n",
                           "type": "string"
                        },
                        "status": {
                           "description": "The HTTP status code for this occurrence of the problem.\n",
                           "type": "integer"
                        },
                        "detail": {
                           "description": "A longer explanation of the specific occurrence of the problem.\n",
                           "type": "string"
                        },
                        "instance": {
                           "description": "A URI reference that identifies the specific occurrence of the problem.\n",
                           "type": "string",
                           "format": "URI"
                        }
                     }
                  }
               },
               "403": {
                  "description": "If the API consumer is not allowed to perform a particular request to a particular resource, the API producer shall respond with this response code.\n",
                  "headers": {
                     "Content-Type": {
                        "description": "The MIME type of the body of the response (\"application/problem+json\").",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 1
                     },
                     "WWW-Authenticate": {
                        "description": "Challenge if the corresponding HTTP request has not provided authorization, or error details if the corresponding HTTP request has provided an invalid authorization token.\n",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 0
                     }
                  },
                  "schema": {
                     "description": "General \"ProblemDetails\" data structure from IETF RFC 7807 [19].\n",
                     "type": "object",
                     "required": [
                        "status",
                        "detail"
                     ],
                     "properties": {
                        "type": {
                           "description": "Problem type according to IETF RFC 3986 [5]\n",
                           "type": "string",
                           "format": "URI"
                        },
                        "title": {
                           "description": "A short, human-readable summary of the problem type.\n",
                           "type": "string"
                        },
                        "status": {
                           "description": "The HTTP status code for this occurrence of the problem.\n",
                           "type": "integer"
                        },
                        "detail": {
                           "description": "A longer explanation of the specific occurrence of the problem.\n",
                           "type": "string"
                        },
                        "instance": {
                           "description": "A URI reference that identifies the specific occurrence of the problem.\n",
                           "type": "string",
                           "format": "URI"
                        }
                     }
                  }
               },
               "404": {
                  "description": "If the API producer did not find a current representation for the resource addressed by the URI passed in the request, or is not willing to disclose that one exists.\n",
                  "headers": {
                     "Content-Type": {
                        "description": "The MIME type of the body of the response (\"application/problem+json\").",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 1
                     },
                     "WWW-Authenticate": {
                        "description": "Challenge if the corresponding HTTP request has not provided authorization, or error details if the corresponding HTTP request has provided an invalid authorization token.\n",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 0
                     }
                  },
                  "schema": {
                     "description": "General \"ProblemDetails\" data structure from IETF RFC 7807 [19].\n",
                     "type": "object",
                     "required": [
                        "status",
                        "detail"
                     ],
                     "properties": {
                        "type": {
                           "description": "Problem type according to IETF RFC 3986 [5]\n",
                           "type": "string",
                           "format": "URI"
                        },
                        "title": {
                           "description": "A short, human-readable summary of the problem type.\n",
                           "type": "string"
                        },
                        "status": {
                           "description": "The HTTP status code for this occurrence of the problem.\n",
                           "type": "integer"
                        },
                        "detail": {
                           "description": "A longer explanation of the specific occurrence of the problem.\n",
                           "type": "string"
                        },
                        "instance": {
                           "description": "A URI reference that identifies the specific occurrence of the problem.\n",
                           "type": "string",
                           "format": "URI"
                        }
                     }
                  }
               },
               "405": {
                  "description": "If the API producer did not find a current representation for the resource addressed by the URI passed in the request, or is not willing to disclose that one exists.\n",
                  "headers": {
                     "Content-Type": {
                        "description": "The MIME type of the body of the response (\"application/problem+json\").",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 1
                     },
                     "WWW-Authenticate": {
                        "description": "Challenge if the corresponding HTTP request has not provided authorization, or error details if the corresponding HTTP request has provided an invalid authorization token.\n",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 0
                     }
                  },
                  "schema": {
                     "description": "General \"ProblemDetails\" data structure from IETF RFC 7807 [19].\n",
                     "type": "object",
                     "required": [
                        "status",
                        "detail"
                     ],
                     "properties": {
                        "type": {
                           "description": "Problem type according to IETF RFC 3986 [5]\n",
                           "type": "string",
                           "format": "URI"
                        },
                        "title": {
                           "description": "A short, human-readable summary of the problem type.\n",
                           "type": "string"
                        },
                        "status": {
                           "description": "The HTTP status code for this occurrence of the problem.\n",
                           "type": "integer"
                        },
                        "detail": {
                           "description": "A longer explanation of the specific occurrence of the problem.\n",
                           "type": "string"
                        },
                        "instance": {
                           "description": "A URI reference that identifies the specific occurrence of the problem.\n",
                           "type": "string",
                           "format": "URI"
                        }
                     }
                  }
               },
               "406": {
                  "description": "If the \"Accept\" HTTP header does not contain at least one name of a content type that is acceptable to the API producer.\n",
                  "headers": {
                     "Content-Type": {
                        "description": "The MIME type of the body of the response (\"application/problem+json\").",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 1
                     },
                     "WWW-Authenticate": {
                        "description": "Challenge if the corresponding HTTP request has not provided authorization, or error details if the corresponding HTTP request has provided an invalid authorization token.\n",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 0
                     }
                  },
                  "schema": {
                     "description": "General \"ProblemDetails\" data structure from IETF RFC 7807 [19].\n",
                     "type": "object",
                     "required": [
                        "status",
                        "detail"
                     ],
                     "properties": {
                        "type": {
                           "description": "Problem type according to IETF RFC 3986 [5]\n",
                           "type": "string",
                           "format": "URI"
                        },
                        "title": {
                           "description": "A short, human-readable summary of the problem type.\n",
                           "type": "string"
                        },
                        "status": {
                           "description": "The HTTP status code for this occurrence of the problem.\n",
                           "type": "integer"
                        },
                        "detail": {
                           "description": "A longer explanation of the specific occurrence of the problem.\n",
                           "type": "string"
                        },
                        "instance": {
                           "description": "A URI reference that identifies the specific occurrence of the problem.\n",
                           "type": "string",
                           "format": "URI"
                        }
                     }
                  }
               },
               "409": {
                  "description": "Another request is in progress that prohibits the fulfillment of the current request, or the current resource state is inconsistent with the request.\n",
                  "headers": {
                     "Content-Type": {
                        "description": "The MIME type of the body of the response (\"application/problem+json\").",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 1
                     },
                     "WWW-Authenticate": {
                        "description": "Challenge if the corresponding HTTP request has not provided authorization, or error details if the corresponding HTTP request has provided an invalid authorization token.\n",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 0
                     }
                  },
                  "schema": {
                     "description": "General \"ProblemDetails\" data structure from IETF RFC 7807 [19].\n",
                     "type": "object",
                     "required": [
                        "status",
                        "detail"
                     ],
                     "properties": {
                        "type": {
                           "description": "Problem type according to IETF RFC 3986 [5]\n",
                           "type": "string",
                           "format": "URI"
                        },
                        "title": {
                           "description": "A short, human-readable summary of the problem type.\n",
                           "type": "string"
                        },
                        "status": {
                           "description": "The HTTP status code for this occurrence of the problem.\n",
                           "type": "integer"
                        },
                        "detail": {
                           "description": "A longer explanation of the specific occurrence of the problem.\n",
                           "type": "string"
                        },
                        "instance": {
                           "description": "A URI reference that identifies the specific occurrence of the problem.\n",
                           "type": "string",
                           "format": "URI"
                        }
                     }
                  }
               },
               "412": {
                  "description": "This code is used in conjunction with conditional requests (typically used to protect resources consistency when using PUT or PATCH in a multi-client scenario) to indicate that a precondition has failed.\n",
                  "headers": {
                     "Content-Type": {
                        "description": "The MIME type of the body of the response (\"application/problem+json\").",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 1
                     },
                     "WWW-Authenticate": {
                        "description": "Challenge if the corresponding HTTP request has not provided authorization, or error details if the corresponding HTTP request has provided an invalid authorization token.\n",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 0
                     }
                  },
                  "schema": {
                     "description": "General \"ProblemDetails\" data structure from IETF RFC 7807 [19].\n",
                     "type": "object",
                     "required": [
                        "status",
                        "detail"
                     ],
                     "properties": {
                        "type": {
                           "description": "Problem type according to IETF RFC 3986 [5]\n",
                           "type": "string",
                           "format": "URI"
                        },
                        "title": {
                           "description": "A short, human-readable summary of the problem type.\n",
                           "type": "string"
                        },
                        "status": {
                           "description": "The HTTP status code for this occurrence of the problem.\n",
                           "type": "integer"
                        },
                        "detail": {
                           "description": "A longer explanation of the specific occurrence of the problem.\n",
                           "type": "string"
                        },
                        "instance": {
                           "description": "A URI reference that identifies the specific occurrence of the problem.\n",
                           "type": "string",
                           "format": "URI"
                        }
                     }
                  }
               },
               "416": {
                  "description": "This code is returned if the requested byte range in the Range HTTP header is not present in the requested resource.\n",
                  "headers": {
                     "Content-Type": {
                        "description": "The MIME type of the body of the response (\"application/problem+json\").",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 1
                     },
                     "WWW-Authenticate": {
                        "description": "Challenge if the corresponding HTTP request has not provided authorization, or error details if the corresponding HTTP request has provided an invalid authorization token.\n",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 0
                     }
                  },
                  "schema": {
                     "description": "General \"ProblemDetails\" data structure from IETF RFC 7807 [19].\n",
                     "type": "object",
                     "required": [
                        "status",
                        "detail"
                     ],
                     "properties": {
                        "type": {
                           "description": "Problem type according to IETF RFC 3986 [5]\n",
                           "type": "string",
                           "format": "URI"
                        },
                        "title": {
                           "description": "A short, human-readable summary of the problem type.\n",
                           "type": "string"
                        },
                        "status": {
                           "description": "The HTTP status code for this occurrence of the problem.\n",
                           "type": "integer"
                        },
                        "detail": {
                           "description": "A longer explanation of the specific occurrence of the problem.\n",
                           "type": "string"
                        },
                        "instance": {
                           "description": "A URI reference that identifies the specific occurrence of the problem.\n",
                           "type": "string",
                           "format": "URI"
                        }
                     }
                  }
               },
               "422": {
                  "description": "If the payload body of a request contains syntactically correct data (e.g. well-formed JSON) but the data cannot be processed (e.g. because it fails validation against a schema).\n",
                  "headers": {
                     "Content-Type": {
                        "description": "The MIME type of the body of the response.",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 1
                     },
                     "WWW-Authenticate": {
                        "description": "Challenge if the corresponding HTTP request has not provided authorization, or error details if the corresponding HTTP request has provided an invalid authorization token.\n",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 0
                     }
                  },
                  "schema": {
                     "description": "The definition of the general \"ProblemDetails\" data structure from IETF RFC 7807 [19] is reproduced inthis structure. Compared to the general framework defined in IETF RFC 7807 [19], the \"status\" and \"detail\" attributes are mandated to be included by the present document, to ensure that the response contains additional textual information about an error. IETF RFC 7807 [19] foresees extensibility of the \"ProblemDetails\" type. It is possible that particular APIs in the present document, or particular implementations, define extensions to define additional attributes that provide more information about the error. The description column only provides some explanation of the meaning to Facilitate understanding of the design. For a full description, see IETF RFC 7807 [19].\n",
                     "type": "object",
                     "required": [
                        "status",
                        "detail"
                     ],
                     "properties": {
                        "type": {
                           "description": "A URI reference according to IETF RFC 3986 [5] that identifies the problem type. It is encouraged that the URI provides human-readable documentation for the problem (e.g. using HTML) when dereferenced. When this member is not present, its value is assumed to be \"about:blank\".\n",
                           "type": "string",
                           "format": "URI"
                        },
                        "title": {
                           "description": "A short, human-readable summary of the problem type. It should not change from occurrence to occurrence of the problem, except for purposes of localization. If type is given and other than \"about:blank\", this attribute shall also be provided. A short, human-readable summary of the problem type.  It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization (e.g., using proactive content negotiation; see [RFC7231], Section 3.4).\n",
                           "type": "string"
                        },
                        "status": {
                           "description": "The HTTP status code for this occurrence of the problem. The HTTP status code ([RFC7231], Section 6) generated by the origin server for this occurrence of the problem.\n",
                           "type": "integer"
                        },
                        "detail": {
                           "description": "A human-readable explanation specific to this occurrence of the problem.\n",
                           "type": "string"
                        },
                        "instance": {
                           "description": "A URI reference that identifies the specific occurrence of the problem. It may yield further information if dereferenced.\n",
                           "type": "string",
                           "format": "URI"
                        }
                     }
                  }
               },
               "500": {
                  "description": "If there is an application error not related to the client's input that cannot be easily mapped to any other HTTP response code (\"catch all error\").\n",
                  "headers": {
                     "Content-Type": {
                        "description": "The MIME type of the body of the response (\"application/problem+json\").",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 1
                     },
                     "WWW-Authenticate": {
                        "description": "Challenge if the corresponding HTTP request has not provided authorization, or error details if the corresponding HTTP request has provided an invalid authorization token.\n",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 0
                     }
                  },
                  "schema": {
                     "description": "General \"ProblemDetails\" data structure from IETF RFC 7807 [19].\n",
                     "type": "object",
                     "required": [
                        "status",
                        "detail"
                     ],
                     "properties": {
                        "type": {
                           "description": "Problem type according to IETF RFC 3986 [5]\n",
                           "type": "string",
                           "format": "URI"
                        },
                        "title": {
                           "description": "A short, human-readable summary of the problem type.\n",
                           "type": "string"
                        },
                        "status": {
                           "description": "The HTTP status code for this occurrence of the problem.\n",
                           "type": "integer"
                        },
                        "detail": {
                           "description": "A longer explanation of the specific occurrence of the problem.\n",
                           "type": "string"
                        },
                        "instance": {
                           "description": "A URI reference that identifies the specific occurrence of the problem.\n",
                           "type": "string",
                           "format": "URI"
                        }
                     }
                  }
               },
               "503": {
                  "description": "If the API producer encounters an internal overload situation of itself or of a system it relies on.\n",
                  "headers": {
                     "Content-Type": {
                        "description": "The MIME type of the body of the response (\"application/problem+json\").",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 1
                     },
                     "WWW-Authenticate": {
                        "description": "Challenge if the corresponding HTTP request has not provided authorization, or error details if the corresponding HTTP request has provided an invalid authorization token.\n",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 0
                     }
                  },
                  "schema": {
                     "description": "General \"ProblemDetails\" data structure from IETF RFC 7807 [19].\n",
                     "type": "object",
                     "required": [
                        "status",
                        "detail"
                     ],
                     "properties": {
                        "type": {
                           "description": "Problem type according to IETF RFC 3986 [5]\n",
                           "type": "string",
                           "format": "URI"
                        },
                        "title": {
                           "description": "A short, human-readable summary of the problem type.\n",
                           "type": "string"
                        },
                        "status": {
                           "description": "The HTTP status code for this occurrence of the problem.\n",
                           "type": "integer"
                        },
                        "detail": {
                           "description": "A longer explanation of the specific occurrence of the problem.\n",
                           "type": "string"
                        },
                        "instance": {
                           "description": "A URI reference that identifies the specific occurrence of the problem.\n",
                           "type": "string",
                           "format": "URI"
                        }
                     }
                  }
               }
            },
            "tags": ["slices"]
         },
         "delete": {
            "description": "**Delete NST**: Delete a NST. After deletion, there is no possible anymore to create Network Slice Instances (NSIs).\n",
            "responses": {
               "204": {
                  "description": "The NST was deleted successfully.\n",
                  "headers": {
                     "WWW-Authenticate": {
                        "description": "Challenge if the corresponding HTTP request has not provided authorization, or error details if the corresponding HTTP request has provided an invalid authorization token.\n",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 0
                     }
                  }
               },
               "400": {
                  "description": "If the request is malformed or syntactically incorrect.\n",
                  "headers": {
                     "Content-Type": {
                        "description": "The MIME type of the body of the response (\"application/problem+json\").",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 1
                     },
                     "WWW-Authenticate": {
                        "description": "Challenge if the corresponding HTTP request has not provided authorization, or error details if the corresponding HTTP request has provided an invalid authorization token.\n",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 0
                     }
                  },
                  "schema": {
                     "description": "General \"ProblemDetails\" data structure from IETF RFC 7807 [19].\n",
                     "type": "object",
                     "required": [
                        "status",
                        "detail"
                     ],
                     "properties": {
                        "type": {
                           "description": "Problem type according to IETF RFC 3986 [5]\n",
                           "type": "string",
                           "format": "URI"
                        },
                        "title": {
                           "description": "A short, human-readable summary of the problem type.\n",
                           "type": "string"
                        },
                        "status": {
                           "description": "The HTTP status code for this occurrence of the problem.\n",
                           "type": "integer"
                        },
                        "detail": {
                           "description": "A longer explanation of the specific occurrence of the problem.\n",
                           "type": "string"
                        },
                        "instance": {
                           "description": "A URI reference that identifies the specific occurrence of the problem.\n",
                           "type": "string",
                           "format": "URI"
                        }
                     }
                  }
               },
               "401": {
                  "description": "If the request contains no access token even though one is required, or if the request contains an authorization token that is invalid.\n",
                  "headers": {
                     "Content-Type": {
                        "description": "The MIME type of the body of the response (\"application/problem+json\").",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 1
                     },
                     "WWW-Authenticate": {
                        "description": "Challenge if the corresponding HTTP request has not provided authorization, or error details if the corresponding HTTP request has provided an invalid authorization token.\n",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 0
                     }
                  },
                  "schema": {
                     "description": "General \"ProblemDetails\" data structure from IETF RFC 7807 [19].\n",
                     "type": "object",
                     "required": [
                        "status",
                        "detail"
                     ],
                     "properties": {
                        "type": {
                           "description": "Problem type according to IETF RFC 3986 [5]\n",
                           "type": "string",
                           "format": "URI"
                        },
                        "title": {
                           "description": "A short, human-readable summary of the problem type.\n",
                           "type": "string"
                        },
                        "status": {
                           "description": "The HTTP status code for this occurrence of the problem.\n",
                           "type": "integer"
                        },
                        "detail": {
                           "description": "A longer explanation of the specific occurrence of the problem.\n",
                           "type": "string"
                        },
                        "instance": {
                           "description": "A URI reference that identifies the specific occurrence of the problem.\n",
                           "type": "string",
                           "format": "URI"
                        }
                     }
                  }
               },
               "403": {
                  "description": "If the API consumer is not allowed to perform a particular request to a particular resource, the API producer shall respond with this response code.\n",
                  "headers": {
                     "Content-Type": {
                        "description": "The MIME type of the body of the response (\"application/problem+json\").",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 1
                     },
                     "WWW-Authenticate": {
                        "description": "Challenge if the corresponding HTTP request has not provided authorization, or error details if the corresponding HTTP request has provided an invalid authorization token.\n",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 0
                     }
                  },
                  "schema": {
                     "description": "General \"ProblemDetails\" data structure from IETF RFC 7807 [19].\n",
                     "type": "object",
                     "required": [
                        "status",
                        "detail"
                     ],
                     "properties": {
                        "type": {
                           "description": "Problem type according to IETF RFC 3986 [5]\n",
                           "type": "string",
                           "format": "URI"
                        },
                        "title": {
                           "description": "A short, human-readable summary of the problem type.\n",
                           "type": "string"
                        },
                        "status": {
                           "description": "The HTTP status code for this occurrence of the problem.\n",
                           "type": "integer"
                        },
                        "detail": {
                           "description": "A longer explanation of the specific occurrence of the problem.\n",
                           "type": "string"
                        },
                        "instance": {
                           "description": "A URI reference that identifies the specific occurrence of the problem.\n",
                           "type": "string",
                           "format": "URI"
                        }
                     }
                  }
               },
               "404": {
                  "description": "If the API producer did not find a current representation for the resource addressed by the URI passed in the request, or is not willing to disclose that one exists.\n",
                  "headers": {
                     "Content-Type": {
                        "description": "The MIME type of the body of the response (\"application/problem+json\").",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 1
                     },
                     "WWW-Authenticate": {
                        "description": "Challenge if the corresponding HTTP request has not provided authorization, or error details if the corresponding HTTP request has provided an invalid authorization token.\n",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 0
                     }
                  },
                  "schema": {
                     "description": "General \"ProblemDetails\" data structure from IETF RFC 7807 [19].\n",
                     "type": "object",
                     "required": [
                        "status",
                        "detail"
                     ],
                     "properties": {
                        "type": {
                           "description": "Problem type according to IETF RFC 3986 [5]\n",
                           "type": "string",
                           "format": "URI"
                        },
                        "title": {
                           "description": "A short, human-readable summary of the problem type.\n",
                           "type": "string"
                        },
                        "status": {
                           "description": "The HTTP status code for this occurrence of the problem.\n",
                           "type": "integer"
                        },
                        "detail": {
                           "description": "A longer explanation of the specific occurrence of the problem.\n",
                           "type": "string"
                        },
                        "instance": {
                           "description": "A URI reference that identifies the specific occurrence of the problem.\n",
                           "type": "string",
                           "format": "URI"
                        }
                     }
                  }
               },
               "405": {
                  "description": "If the API producer did not find a current representation for the resource addressed by the URI passed in the request, or is not willing to disclose that one exists.\n",
                  "headers": {
                     "Content-Type": {
                        "description": "The MIME type of the body of the response (\"application/problem+json\").",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 1
                     },
                     "WWW-Authenticate": {
                        "description": "Challenge if the corresponding HTTP request has not provided authorization, or error details if the corresponding HTTP request has provided an invalid authorization token.\n",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 0
                     }
                  },
                  "schema": {
                     "description": "General \"ProblemDetails\" data structure from IETF RFC 7807 [19].\n",
                     "type": "object",
                     "required": [
                        "status",
                        "detail"
                     ],
                     "properties": {
                        "type": {
                           "description": "Problem type according to IETF RFC 3986 [5]\n",
                           "type": "string",
                           "format": "URI"
                        },
                        "title": {
                           "description": "A short, human-readable summary of the problem type.\n",
                           "type": "string"
                        },
                        "status": {
                           "description": "The HTTP status code for this occurrence of the problem.\n",
                           "type": "integer"
                        },
                        "detail": {
                           "description": "A longer explanation of the specific occurrence of the problem.\n",
                           "type": "string"
                        },
                        "instance": {
                           "description": "A URI reference that identifies the specific occurrence of the problem.\n",
                           "type": "string",
                           "format": "URI"
                        }
                     }
                  }
               },
               "406": {
                  "description": "If the \"Accept\" HTTP header does not contain at least one name of a content type that is acceptable to the API producer.\n",
                  "headers": {
                     "Content-Type": {
                        "description": "The MIME type of the body of the response (\"application/problem+json\").",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 1
                     },
                     "WWW-Authenticate": {
                        "description": "Challenge if the corresponding HTTP request has not provided authorization, or error details if the corresponding HTTP request has provided an invalid authorization token.\n",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 0
                     }
                  },
                  "schema": {
                     "description": "General \"ProblemDetails\" data structure from IETF RFC 7807 [19].\n",
                     "type": "object",
                     "required": [
                        "status",
                        "detail"
                     ],
                     "properties": {
                        "type": {
                           "description": "Problem type according to IETF RFC 3986 [5]\n",
                           "type": "string",
                           "format": "URI"
                        },
                        "title": {
                           "description": "A short, human-readable summary of the problem type.\n",
                           "type": "string"
                        },
                        "status": {
                           "description": "The HTTP status code for this occurrence of the problem.\n",
                           "type": "integer"
                        },
                        "detail": {
                           "description": "A longer explanation of the specific occurrence of the problem.\n",
                           "type": "string"
                        },
                        "instance": {
                           "description": "A URI reference that identifies the specific occurrence of the problem.\n",
                           "type": "string",
                           "format": "URI"
                        }
                     }
                  }
               },
               "409": {
                  "description": "Another request is in progress that prohibits the fulfillment of the current request, or the current resource state is inconsistent with the request.\n",
                  "headers": {
                     "Content-Type": {
                        "description": "The MIME type of the body of the response (\"application/problem+json\").",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 1
                     },
                     "WWW-Authenticate": {
                        "description": "Challenge if the corresponding HTTP request has not provided authorization, or error details if the corresponding HTTP request has provided an invalid authorization token.\n",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 0
                     }
                  },
                  "schema": {
                     "description": "General \"ProblemDetails\" data structure from IETF RFC 7807 [19].\n",
                     "type": "object",
                     "required": [
                        "status",
                        "detail"
                     ],
                     "properties": {
                        "type": {
                           "description": "Problem type according to IETF RFC 3986 [5]\n",
                           "type": "string",
                           "format": "URI"
                        },
                        "title": {
                           "description": "A short, human-readable summary of the problem type.\n",
                           "type": "string"
                        },
                        "status": {
                           "description": "The HTTP status code for this occurrence of the problem.\n",
                           "type": "integer"
                        },
                        "detail": {
                           "description": "A longer explanation of the specific occurrence of the problem.\n",
                           "type": "string"
                        },
                        "instance": {
                           "description": "A URI reference that identifies the specific occurrence of the problem.\n",
                           "type": "string",
                           "format": "URI"
                        }
                     }
                  }
               },
               "412": {
                  "description": "This code is used in conjunction with conditional requests (typically used to protect resources consistency when using PUT or PATCH in a multi-client scenario) to indicate that a precondition has failed.\n",
                  "headers": {
                     "Content-Type": {
                        "description": "The MIME type of the body of the response (\"application/problem+json\").",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 1
                     },
                     "WWW-Authenticate": {
                        "description": "Challenge if the corresponding HTTP request has not provided authorization, or error details if the corresponding HTTP request has provided an invalid authorization token.\n",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 0
                     }
                  },
                  "schema": {
                     "description": "General \"ProblemDetails\" data structure from IETF RFC 7807 [19].\n",
                     "type": "object",
                     "required": [
                        "status",
                        "detail"
                     ],
                     "properties": {
                        "type": {
                           "description": "Problem type according to IETF RFC 3986 [5]\n",
                           "type": "string",
                           "format": "URI"
                        },
                        "title": {
                           "description": "A short, human-readable summary of the problem type.\n",
                           "type": "string"
                        },
                        "status": {
                           "description": "The HTTP status code for this occurrence of the problem.\n",
                           "type": "integer"
                        },
                        "detail": {
                           "description": "A longer explanation of the specific occurrence of the problem.\n",
                           "type": "string"
                        },
                        "instance": {
                           "description": "A URI reference that identifies the specific occurrence of the problem.\n",
                           "type": "string",
                           "format": "URI"
                        }
                     }
                  }
               },
               "416": {
                  "description": "This code is returned if the requested byte range in the Range HTTP header is not present in the requested resource.\n",
                  "headers": {
                     "Content-Type": {
                        "description": "The MIME type of the body of the response (\"application/problem+json\").",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 1
                     },
                     "WWW-Authenticate": {
                        "description": "Challenge if the corresponding HTTP request has not provided authorization, or error details if the corresponding HTTP request has provided an invalid authorization token.\n",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 0
                     }
                  },
                  "schema": {
                     "description": "General \"ProblemDetails\" data structure from IETF RFC 7807 [19].\n",
                     "type": "object",
                     "required": [
                        "status",
                        "detail"
                     ],
                     "properties": {
                        "type": {
                           "description": "Problem type according to IETF RFC 3986 [5]\n",
                           "type": "string",
                           "format": "URI"
                        },
                        "title": {
                           "description": "A short, human-readable summary of the problem type.\n",
                           "type": "string"
                        },
                        "status": {
                           "description": "The HTTP status code for this occurrence of the problem.\n",
                           "type": "integer"
                        },
                        "detail": {
                           "description": "A longer explanation of the specific occurrence of the problem.\n",
                           "type": "string"
                        },
                        "instance": {
                           "description": "A URI reference that identifies the specific occurrence of the problem.\n",
                           "type": "string",
                           "format": "URI"
                        }
                     }
                  }
               },
               "422": {
                  "description": "If the payload body of a request contains syntactically correct data (e.g. well-formed JSON) but the data cannot be processed (e.g. because it fails validation against a schema).\n",
                  "headers": {
                     "Content-Type": {
                        "description": "The MIME type of the body of the response.",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 1
                     },
                     "WWW-Authenticate": {
                        "description": "Challenge if the corresponding HTTP request has not provided authorization, or error details if the corresponding HTTP request has provided an invalid authorization token.\n",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 0
                     }
                  },
                  "schema": {
                     "description": "The definition of the general \"ProblemDetails\" data structure from IETF RFC 7807 [19] is reproduced inthis structure. Compared to the general framework defined in IETF RFC 7807 [19], the \"status\" and \"detail\" attributes are mandated to be included by the present document, to ensure that the response contains additional textual information about an error. IETF RFC 7807 [19] foresees extensibility of the \"ProblemDetails\" type. It is possible that particular APIs in the present document, or particular implementations, define extensions to define additional attributes that provide more information about the error. The description column only provides some explanation of the meaning to Facilitate understanding of the design. For a full description, see IETF RFC 7807 [19].\n",
                     "type": "object",
                     "required": [
                        "status",
                        "detail"
                     ],
                     "properties": {
                        "type": {
                           "description": "A URI reference according to IETF RFC 3986 [5] that identifies the problem type. It is encouraged that the URI provides human-readable documentation for the problem (e.g. using HTML) when dereferenced. When this member is not present, its value is assumed to be \"about:blank\".\n",
                           "type": "string",
                           "format": "URI"
                        },
                        "title": {
                           "description": "A short, human-readable summary of the problem type. It should not change from occurrence to occurrence of the problem, except for purposes of localization. If type is given and other than \"about:blank\", this attribute shall also be provided. A short, human-readable summary of the problem type.  It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization (e.g., using proactive content negotiation; see [RFC7231], Section 3.4).\n",
                           "type": "string"
                        },
                        "status": {
                           "description": "The HTTP status code for this occurrence of the problem. The HTTP status code ([RFC7231], Section 6) generated by the origin server for this occurrence of the problem.\n",
                           "type": "integer"
                        },
                        "detail": {
                           "description": "A human-readable explanation specific to this occurrence of the problem.\n",
                           "type": "string"
                        },
                        "instance": {
                           "description": "A URI reference that identifies the specific occurrence of the problem. It may yield further information if dereferenced.\n",
                           "type": "string",
                           "format": "URI"
                        }
                     }
                  }
               },
               "500": {
                  "description": "If there is an application error not related to the client's input that cannot be easily mapped to any other HTTP response code (\"catch all error\").\n",
                  "headers": {
                     "Content-Type": {
                        "description": "The MIME type of the body of the response (\"application/problem+json\").",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 1
                     },
                     "WWW-Authenticate": {
                        "description": "Challenge if the corresponding HTTP request has not provided authorization, or error details if the corresponding HTTP request has provided an invalid authorization token.\n",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 0
                     }
                  },
                  "schema": {
                     "description": "General \"ProblemDetails\" data structure from IETF RFC 7807 [19].\n",
                     "type": "object",
                     "required": [
                        "status",
                        "detail"
                     ],
                     "properties": {
                        "type": {
                           "description": "Problem type according to IETF RFC 3986 [5]\n",
                           "type": "string",
                           "format": "URI"
                        },
                        "title": {
                           "description": "A short, human-readable summary of the problem type.\n",
                           "type": "string"
                        },
                        "status": {
                           "description": "The HTTP status code for this occurrence of the problem.\n",
                           "type": "integer"
                        },
                        "detail": {
                           "description": "A longer explanation of the specific occurrence of the problem.\n",
                           "type": "string"
                        },
                        "instance": {
                           "description": "A URI reference that identifies the specific occurrence of the problem.\n",
                           "type": "string",
                           "format": "URI"
                        }
                     }
                  }
               },
               "503": {
                  "description": "If the API producer encounters an internal overload situation of itself or of a system it relies on.\n",
                  "headers": {
                     "Content-Type": {
                        "description": "The MIME type of the body of the response (\"application/problem+json\").",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 1
                     },
                     "WWW-Authenticate": {
                        "description": "Challenge if the corresponding HTTP request has not provided authorization, or error details if the corresponding HTTP request has provided an invalid authorization token.\n",
                        "type": "string",
                        "maximum": 1,
                        "minimum": 0
                     }
                  },
                  "schema": {
                     "description": "General \"ProblemDetails\" data structure from IETF RFC 7807 [19].\n",
                     "type": "object",
                     "required": [
                        "status",
                        "detail"
                     ],
                     "properties": {
                        "type": {
                           "description": "Problem type according to IETF RFC 3986 [5]\n",
                           "type": "string",
                           "format": "URI"
                        },
                        "title": {
                           "description": "A short, human-readable summary of the problem type.\n",
                           "type": "string"
                        },
                        "status": {
                           "description": "The HTTP status code for this occurrence of the problem.\n",
                           "type": "integer"
                        },
                        "detail": {
                           "description": "A longer explanation of the specific occurrence of the problem.\n",
                           "type": "string"
                        },
                        "instance": {
                           "description": "A URI reference that identifies the specific occurrence of the problem.\n",
                           "type": "string",
                           "format": "URI"
                        }
                     }
                  }
               }
            },
            "tags": ["slices"]
         }
      },
      "/users": {
        "post": {
          "tags": [ "users"],
          "summary": "Register a new user",
          "description": "Register a new user",
          "operationId": "onChangeUsingPOST",
          "consumes": ["application/json"],
          "produces": ["application/json"],
          "parameters": [
            { "name": "username", "in": "query", "description": "username", "required": true, "type": "string" },
            { "name": "name", "in": "query", "description": "name", "required": true, "type": "string" },
            { "name": "password", "in": "query", "description": "password", "required": true, "type": "string" },
            { "name": "email", "in": "query", "description": "email", "required": true, "type": "string" },
            { "name": "role", "in": "query", "description": "role", "required": true, "type": "string" }
          ],
          "responses": {
            "200": { "description": "OK" },
            "400": { "description": "Bad Request" },
            "409": { "description": "Conflict" },            
            "500": { "description": "Error in the registration process"}
          }
        },
        "get": {
          "tags": ["users"],
          "summary": "Retrieve all users",
          "description": "Retrieve all users",
          "operationId": "listAllUsersUsingGET",
          "produces": ["*/*"],
          "responses": {
            "200": {"description": "OK"},
            "400": {"description": "Bad Request"},
            "500": {"description": "Error retieving users"}
          },
          "deprecated": false
        }
      },
      "/users/sessions": {
        "post": {
          "tags": ["users"],
          "summary": "Register a new user",
          "description": "Register a new user",
          "operationId": "registerUsingPOST",
          "consumes": ["application/json"],
          "produces": ["application/json"],
          "parameters": [
            {"name": "username", "in": "query", "description": "username", "required": true, "type": "string" },
            {"name": "password", "in": "query", "description": "name", "required": true, "type": "string" }
          ],
          "responses": {
            "200": { "description": "OK" },
            "400": { "description": "Bad Request" },
            "409": { "description": "Conflict" },            
            "500": { "description": "Error in the registration process" }
          }
        }
      },
      "/users/{user_name}": {
        "patch": {
          "tags": [ "users"],
          "summary": "Update a user",
          "description": "Update a new user",
          "operationId": "updateUsingPATCH",
          "consumes": ["application/json"],
          "produces": ["application/json"],
          "parameters": [
            { "name": "user_name", "in": "path", "description": "username", "required": true, "type": "string" },
            { "name": "name", "in": "query", "description": "name", "required": true, "type": "string" },
            { "name": "password", "in": "query", "description": "password", "required": true, "type": "string" },
            { "name": "email", "in": "query", "description": "email", "required": true, "type": "string" },
            { "name": "role", "in": "query", "description": "role", "required": true, "type": "string" }
          ],
          "responses": {
            "200": { "description": "OK" },
            "400": { "description": "Bad Request" },
            "409": { "description": "Conflict" },            
            "500": { "description": "Error in the registration process" }
          }
        },
        "delete": {
          "tags": [ "users" ],
          "summary": "Delete user",
          "description": "user",
          "operationId": "deleteUserUsingDELETE",
          "produces": [ "*/*" ],
          "parameters": [
            { "name": "user_name", "in": "path", "description": "username", "required": true, "type": "string" }
          ],         
          "responses": {
            "200": { "description": "OK" },
            "400": { "description": "Bad Request" },
            "500": { "description": "Error retieving users" }
          },
          "deprecated": false
        }   
      },
      "/users/endpoints": {
        "get": {
          "tags": ["users"],
          "summary": "Retrieve all endpoints",
          "description": "Retrieve all endpoints",
          "operationId": "listAllEndpointsUsingGET",
          "produces": ["*/*"],
          "responses": {
            "200": {"description": "OK"},
            "400": {"description": "Bad Request"},
            "500": {"description": "Error retieving users"}
          },
          "deprecated": false
        }
      },
      "/users/roles": {
        "get": {
          "tags": ["users"],
          "summary": "Retrieve all users' roles",
          "description": "Retrieve all roles",
          "operationId": "listAllRolsUsingGET",
          "produces": ["application/json"],
          "responses": {
            "200": {"description": "OK"},
            "400": {"description": "Bad Request"},
            "500": {"description": "Error retieving users's roles"}
          },
          "deprecated": false
        }
      }
   },
   "definitions": {
       "FunctionsGetMetadataReturn": {
         "required": [ "function_uuid", "vnfd" ],
         "properties": {
           "function_uuid": { "type": "string", "description": "UUID of the service."},
           "vnfd": { "type": "string", "description": "Service descriptor"}
         },
         "type": "object"
       },
       "OnPackageChangeEvent": {
         "type": "object",
         "required": [ "event_name", "package_id"],
         "properties": {
           "event_name": { "type": "string" },
           "package_id": { "type": "string" },
           "package_location": { "type": "string" },
           "package_metadata": { "type": "string" },
           "package_process_status": { "type": "string" },
           "package_process_uuid": { "type": "string", "description": "UUID of started unpackaging process." }
         },
         "title": "OnPackageChangeEvent"
       },
       "PackagesPostReturn": {
         "required": [ "package_process_uuid" ],
         "properties": {
           "package_process_uuid": {
             "type": "string",
             "description": "UUID of started unpackaging process."
           }
         },
         "type": "object"
       },
       "PackagesGetStatusReturn": {
         "required": [ "package_process_uuid", "status"],
         "properties": {
           "package_process_uuid": {
             "type": "string",
             "description": "UUID of started unpackaging process."
           },
           "status": {
             "type": "string",
             "description": "Status of the unpacking process: waiting|runnig|failed|done"
           },
           "error_msg": {
             "type": "string",
             "description": "More detailed error message."
           }
         },
         "type": "object"
       },
       "PackagesGetMetadataReturn": {
         "required": [ "package_uuid", "pd" ],
         "properties": {
           "package_uuid": {
             "type": "string",
             "description": "UUID of the package."
           },
           "pd": {
             "type": "string",
             "description": "Package descriptor"
           }
         },
         "type": "object"
       },
       "ServicesGetMetadataReturn": {
         "required": [ "service_uuid", "nsd" ],
         "properties": {
           "service_uuid": {"type": "string", "description": "UUID of the service."},
           "nsd": { "type": "string", "description": "Service descriptor"}
         },
         "type": "object"
       },
      "RequestData": {
         "type": "object",
         "properties": {
            "uuid": {
               "type": "string",
               "description": "The UUID of the entity to which the instantiation request is related to (Service or Slice) -- mandatory for request_type CREATE_SERVICE (default) and CREATE_SLICE (nstId)"
            },
            "instance_uuid": {
               "type": "string",
               "description": "The UUID of the instance of the entity to which the request is related to (Service or Slice) -- mandatory for request_type TERMINATE_SERVICE and TERMINATE_SLICE"
            },
            "egresses": {
               "type": "array",
               "description": "List of egress points to be taken into consideration during the instantiation",
               "items": {
                  "type": "string"
               }
            },
            "ingresses": {
               "type": "array",
               "description": "List of ingress points to be taken into consideration during the instantiation",
               "items": {
                  "type": "string"
               }
            },
            "blacklist": {
               "type": "array",
               "description": "List of sites where not to instantiate",
               "items": {
                  "type": "string"
               }
            },
            "callback": {
               "type": "string",
               "description": "The callback to call when the instantiation is ready"
            },
            "name": {
               "type": "string",
               "description": "The callback to call when the instantiation is ready"
            },
            "description": {
               "type": "string",
               "description": "The callback to call when the instantiation is ready"
            },
            "sla_id": {
               "type": "string",
               "description": "The callback to call when the instantiation is ready"
            },
            "policy_id": {
               "type": "string",
               "description": "The callback to call when the instantiation is ready"
            }
         }
      },
      "RequestResponseData": {
         "type": "object",
         "properties": {
            "blacklist": {
               "type": "array",
               "description": "List of sites where not to instantiate",
               "items": {
                  "type": "string"
               }
            },
            "callback": {
               "type": "string",
               "description": "The callback to call when the request status changes"
            },
            "created_at": {
               "type": "string",
               "description": "The time at which the request has been created"
            },
            "customer_name": {
               "type": "string",
               "description": "The name of the Customer making the request"
            },
            "customer_email": {
               "type": "string",
               "description": "The email of the Customer making the request"
            },
            "description": {
               "type": "string",
               "description": "Free (optional) text describing the request"
            },
            "egresses": {
               "type": "array",
               "description": "List of egress points to be taken into consideration during the instantiation",
               "items": {
                  "type": "string"
               }
            },
            "error": {
               "type": "string",
               "description": "Text describing the error ocurred in the request, if thre is any"
            },
            "id": {
               "type": "string",
               "description": "The ID of the request"
            },
            "ingresses": {
               "type": "array",
               "description": "List of ingress points to be taken into consideration during the instantiation",
               "items": {
                  "type": "string"
               }
            },
            "instance_uuid": {
               "type": "string",
               "description": "The UUID of the instance of the entity to which the request is related to (Service or Slice) -- mandatory for TERMINATION"
            },
            "name": {
               "type": "string",
               "description": "The name of the request (optional)"
            },
            "nstId": {
               "type": "string",
               "description": "The UUID of the slice template to which the request is related to -- mandatory for CREATION"
            },
            "request_type": {
               "type": "string",
               "description": "The type of the request. Defaults to CREATE_SERVICE, but can also be TERMINATE_SERVICE, CREATE_SLICE, TERMINATE_SLICE, SCALE_SERVICE or MIGRATE_FUNCTION"
            },
            "service_uuid": {
               "type": "string",
               "description": "The UUID of the service to which the request is related to -- mandatory for CREATION"
            },
            "sla_id": {
               "type": "string",
               "description": "The UUID of the SLA chosen by the customer"
            },
            "policy_id": {
               "type": "string",
               "description": "The UUID of the policy related to the above SLA UUID"
            },
            "status": {
               "type": "string",
               "description": "The status of the request: starts NEW, becomes INSTANTIATING or TERMINATING while the MANO does the work, and finishes either READY (success) or ERROR (fail)"
            },
            "updated_at": {
               "type": "string",
               "description": "The time at which the request has been updated"
            }
         }
      },
      "ResponseEntity": {
      			"type": "object",
      			"properties": {
      				"body": {
      					"type": "object"
      				},
      				"statusCode": {
      					"type": "string",
      					"enum": ["100", "101", "102", "103", "200", "201", "202", "203", "204", "205", "206", "207", "208", "226", "300", "301", "302", "303", "304", "305", "307", "308", "400", "401", "402", "403", "404", "405", "406", "407", "408", "409", "410", "411", "412", "413", "414", "415", "416", "417", "418", "419", "420", "421", "422", "423", "424", "426", "428", "429", "431", "451", "500", "501", "502", "503", "504", "505", "506", "507", "508", "509", "510", "511"]
      				},
      				"statusCodeValue": {
      					"type": "integer",
      					"format": "int32"
      				}
      			},
      			"title": "ResponseEntity"
      		},
      		"RuntimePolicy": {
      			"type": "object",
      			"properties": {
      				"defaultPolicy": {
      					"type": "boolean"
      				},
      				"id": {
      					"type": "string"
      				},
      				"nsid": {
      					"type": "string"
      				},
      				"policyid": {
      					"type": "string"
      				},
      				"slaid": {
      					"type": "string"
      				}
      			},
      			"title": "RuntimePolicy"
      		},
            "vim_json_data": {
              "type": "object",
              "example": {
                "example for VIM with type heat": {
                  "uuid": "1111-22222222-33333333-4444",
                  "name": "MyOpenstackVIM",
                  "country": "Portugal",
                  "city": "Aveiro",
                  "endpoint": "172.31.2.1",
                  "username": "tango",
                  "password": "t4ng0",
                  "tenant": "5gtango",
                  "domain": "Default",
                  "network_endpoint": "172.31.2.2",
                  "private_network_prefix": "192.168.0.0",
                  "private_network_length": "16",
                  "external_network_id": "3283ec5d-984e-46e7-8eac-312a79b878f1",
                  "external_router_id": "eecdb2e2-bae8-443e-b96a-bc8871cf4ddc",
                  "external_router_ip": "172.31.2.3",
                  "management_flow_ip": "172.31.2.4",
                  "floating_ip_ranging": "172.31.2.5-172.31.2.15, 172.31.2.25-172.31.2.30"
                },
                "example for VIM with type mock": {
                  "uuid": "1111-22222222-33333333-3333",
                  "name": "Mock",
                  "country": "Greece",
                  "city": "Athens-North",
                  "endpoint": "10.100.32.200",
                  "username": "user",
                  "password": "pass",
                  "config": {}
                },
                "example for VIM with type k8s": {
                  "uuid": "1111-22222222-33333333-5555",
                  "name": "My K8s VIM",
                  "country": "Milky Way",
                  "city": "Random Galaxy",
                  "endpoint": "6.6.6.6",
                  "config": {}
                },
                "example for VIM with type endpoint": {
                  "uuid": "1111-22222222-33333333-6666",
                  "name": "NeP_1",
                  "country": "Spain",
                  "city": "Barcelona",
                  "endpoint": "",
                  "config": {}
                },
                "example for VIM with type emu": {
                  "uuid": "1111-22222222-33333333-7777",
                  "name": "Emulator",
                  "country": "Spain",
                  "city": "Barcelona",
                  "endpoint": "",
                  "config": {}
                }
              },
              "properties": {
                "uuid": {
                  "type": "string",
                  "description": "The UUID of the VIM -- required for type 'endpoint' and 'emu'"
                },
                "name": {
                  "type": "string",
                  "description": "The name of the VIM -- required"
                },
                "country": {
                  "type": "string",
                  "description": "The country of the VIM -- optional"
                },
                "city": {
                  "type": "string",
                  "description": "The city of the VIM -- optional"
                },
                "endpoint": {
                  "type": "string",
                  "description": "The endpoint of the VIM -- required"
                },
                "username": {
                  "type": "string",
                  "description": "The username of the VIM -- required for type 'heat'"
                },
                "password": {
                  "type": "string",
                  "description": "The password of the VIM -- required for type 'heat'"
                },
                "domain": {
                  "type": "string",
                  "description": "The domain of the VIM  -- optional"
                },
                "config": {
                  "type": "string",
                  "description": "The config of the VIM stored in DB -- required for type 'k8s', forbiden for type 'heat', optional for other types"
                },
                "tenant": {
                  "type": "string",
                  "description": "The tenant of the HEAT VIM  -- required for type 'heat', forbiden for other types"
                },
                "network_endpoint": {
                  "type": "string",
                  "description": "The network endpoint of the HEAT VIM  -- required for type 'heat', forbiden for other types -- if empy use mock network wrapper, else use ovs network wrapper"
                },
                "private_network_prefix": {
                  "type": "string",
                  "description": "The network prefix to create networks in HEAT VIM  -- required for type 'heat', forbiden for other types"
                },
                "private_network_length": {
                  "type": "string",
                  "description": "The network length to create networks in HEAT VIM  -- required for type 'heat', forbiden for other types"
                },
                "external_network_id": {
                  "type": "string",
                  "description": "The external network id in HEAT VIM  -- required for type 'heat', forbiden for other types"
                },
                "external_router_id": {
                  "type": "string",
                  "description": "The external router id in HEAT VIM  -- required for type 'heat', forbiden for other types"
                },
                "external_router_ip": {
                  "type": "string",
                  "description": "The external router IP in HEAT VIM  -- optional for type 'heat' (required if work with TAPI Wrapper), forbiden for other types"
                },
                "management_flow_ip": {
                  "type": "string",
                  "description": "The IP for manage the flows in HEAT VIM  -- optional for type 'heat'  (required if work with TAPI Wrapper), forbiden for other types"
                },
                "floating_ip_ranging": {
                  "type": "string",
                  "description": "The floating IP range in HEAT VIM  -- optional for type 'heat' (required if work with TAPI Wrapper), forbiden for other types"
                }
              }
            },
            "wim_json_data": {
              "type": "object",
              "example": {
                "example for WIM with type tapi": {
                  "uuid": "1111-22222222-33333333-4444",
                  "name": "MyTAPIWIM",
                  "endpoint": "172.31.2.1:8080",
                  "username": "tango",
                  "password": "t4ng0",
                  "vim_list": [
                    "vim_uuid1",
                    "vim_uuid2",
                    "vim_uuid3"
                  ]
                },
                "example for WIM with type emu": {
                  "uuid": "1111-22222222-33333333-7777",
                  "name": "Emulator",
                  "endpoint": "",
                  "vim_list": [
                    "vim_uuid1",
                    "vim_uuid2",
                    "vim_uuid3"
                  ]
                }
              },
              "properties": {
                "uuid": {
                  "type": "string",
                  "description": "The UUID of the WIM -- optional"
                },
                "name": {
                  "type": "string",
                  "description": "The name of the WIM -- required"
                },
                "endpoint": {
                  "type": "string",
                  "description": "The endpoint of the WIM -- required"
                },
                "username": {
                  "type": "string",
                  "description": "The username of the WIM -- optional"
                },
                "password": {
                  "type": "string",
                  "description": "The password of the WIM -- optional"
                },
                "vim_list": {
                  "type": "array",
                  "description": "The list with VIMs UUIDs connected by this WIM -- required",
                  "items": {
                    "type": "string",
                    "description": "VIMs UUIDs connected by this WIM (This VIMs UUIDs must exist in the DB) -- required"
                  }
                }
              }
            }
  
   }
}

